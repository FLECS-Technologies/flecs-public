name: Test

on:
  workflow_call:
    inputs:
      flecs_build_ref:
        required: true
        type: string

jobs:
  test:
    runs-on: ubuntu-22.04
    container: flecspublic.azurecr.io/flecs-build:${{ inputs.flecs_build_ref }}

    strategy:
      matrix:
        arch: ["amd64"]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Set default rustup toolchain
      run: rustup default $FLECS_DEFAULT_RUST_TOOLCHAIN
    - name: Add rustup target for amd64
      if: ${{ inputs.arch == 'amd64' }}
      run: rustup target add --toolchain ${FLECS_DEFAULT_RUST_TOOLCHAIN} x86_64-unknown-linux-gnu
    - name: Add rustup target for arm64
      if: ${{ inputs.arch == 'arm64' }}
      run: rustup target add --toolchain ${FLECS_DEFAULT_RUST_TOOLCHAIN} aarch64-unknown-linux-gnu
    - name: Add rustup target for armhf
      if: ${{ inputs.arch == 'armhf' }}
      run: rustup target add --toolchain ${FLECS_DEFAULT_RUST_TOOLCHAIN} armv7-unknown-linux-gnueabihf
    - name: Set up pkg-config for arm64
      if: ${{ inputs.arch == 'arm64' }}
      run: | # Cross compiling rust crates with C/C++ dependencies requires pkg-config to be set up (e.g. openssl-sys and libudev-sys)
        echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig:/usr/local/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
        echo "PKG_CONFIG_LIBDIR=/usr/lib/aarch64-linux-gnu" >> $GITHUB_ENV
        echo "PKG_CONFIG_SYSROOT_DIR=/" >> $GITHUB_ENV
    - name: Set up pkg-config for armhf
      if: ${{ inputs.arch == 'armhf' }}
      run: | # Cross compiling rust crates with C/C++ dependencies requires pkg-config to be set up (e.g. openssl-sys and libudev-sys)
        echo "PKG_CONFIG_PATH=/usr/lib/arm-linux-gnueabihf/pkgconfig:/usr/share/pkgconfig:/usr/local/lib/arm-linux-gnueabihf/pkgconfig" >> $GITHUB_ENV
        echo "PKG_CONFIG_LIBDIR=/usr/lib/arm-linux-gnueabihf" >> $GITHUB_ENV
        echo "PKG_CONFIG_SYSROOT_DIR=/" >> $GITHUB_ENV
    - name: "CMake: Configure"
      run: |
        cmake -G Ninja -B build/${{ matrix.arch }} -DFLECS_BUILD_TESTS=Yes -DARCH=${{ matrix.arch }} -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=out/${{ matrix.arch }}

    - name: "CMake: Build"
      run: | # flecs-core-rs_cxxbridge generates header files needed by subsequent targets TODO: Improve
        cmake --build build/${{ matrix.arch }} --target flecs-core-rs_cxxbridge 
        cmake --build build/${{ matrix.arch }}

    - name: "CMake: Test"
      run: |
        cmake --build build/${{ matrix.arch }} --target test

    - name: "CMake: Coverage"
      run: |
        cmake --build build/${{ matrix.arch }} --target coverage
