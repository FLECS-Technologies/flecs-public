#!/bin/sh

### BEGIN INIT INFO
# Provides:      flecsd
# Required-Start:  $remote_fs $syslog
# Required-Stop:   $remote_fs $syslog
# Default-Start:   2 3 4 5
# Default-Stop:    0 1 6
# Short-Description: Start flecs at boot time
# Description:     Enable service provided by daemon.
### END INIT INFO

PATH=${PATH}:/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin

SCRIPTNAME=$(readlink -f ${0})

SERVICE=flecsd
BINARY=/opt/flecsd/bin/flecsd.sh

[ ! -x "${DAEMON}" ] && exit 5

print_usage() {
  echo "Usage: $(basename ${SCRIPTNAME}) {start|stop|restart|try-restart|force-reload|status}";
  exit 1;
}

run() {
  $* || exit 1;
}

do_start() {
  bash -x ${BINARY} pull
  bash -x ${BINARY} remove
  run bash -x ${BINARY} create
  run docker start -a flecs-flecsd
  exit 0
}

do_stop() {
  run docker stop --time 120 flecs-flecsd
  run bash -x ${BINARY} remove
  exit 0
}

# Function: do_status
# Check if service is running and return its status:
#   0 service is up and running
#   1 service is dead, but PIDFILE exists
#   3 service is not running
do_status() {
  STATUS=`docker ps -a -f "name=flecs-flecsd" --format "{{.Status}}"`

  case "${STATUS}" in
    Created*|Exited\ \(0\)*)
      # Container is created or exited cleanly
      return 3
      ;;
    Up*)
      # Container is running
      return 0
      ;;
    Exited*)
      #On unclean exit, consider service dead
      return 1
      ;;
  esac

  return 3;
}

case $1 in
  start)
    # exit successfully if service is already running
    if do_status; then
      echo "${SERVICE} is already running";
      exit 0;
    fi
    do_start
    ;;
  stop)
    # exit successfully is service is not running
    if ! do_status; then
      echo "${SERVICE} is not running";
      exit 0;
    fi
    do_stop
    ;;
  restart)
    # stop service if it is running, then perform start
    do_status && do_stop
    do_start
    ;;
  try-restart)
    # exit successfully is service is not running; otherwise stop and start it
    do_status || exit 0
    do_stop
    do_start
    ;;
  reload)
    # unsupported action
    exit 3;
    ;;
  force-reload)
    echo "Warning: unsupported action $1; performing restart instead"
    do_status && do_stop
    do_start
    ;;
  status)
    if do_status; then
      echo "${SERVICE} is running";
    else
      echo "${SERVICE} is not running";
    fi
    ;;
  *)
    print_usage
    ;;
esac
