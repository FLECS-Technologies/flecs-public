/*
 * FLECS Console API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{Deserialize, Serialize};

/// struct for typed successes of method [`get_api_v2_manifests_app_version`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetApiV2ManifestsAppVersionSuccess {
    Status200(models::GetApiV2ManifestsAppVersion200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`post_api_v2_auth_login`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostApiV2AuthLoginSuccess {
    Status200(models::Apiv2AuthLoginPostResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`post_api_v2_auth_validate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostApiV2AuthValidateSuccess {
    Status200(models::Apiv2AuthValidatePostResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`post_api_v2_tokens`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostApiV2TokensSuccess {
    Status200(models::PostApiV2Tokens200Response),
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_api_v2_manifests_app_version`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetApiV2ManifestsAppVersionError {
    Status403(models::ErrorDescription),
    Status404(models::GetApiV2ManifestsAppVersion404Response),
    Status500(models::ErrorDescription),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_api_v2_auth_login`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostApiV2AuthLoginError {
    Status403(models::ErrorDescription),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_api_v2_auth_validate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostApiV2AuthValidateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_api_v2_tokens`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostApiV2TokensError {
    Status403(models::ErrorDescription),
    Status500(models::ErrorDescription),
    UnknownValue(serde_json::Value),
}

/// Get the app manifest for a given app and version
pub async fn get_api_v2_manifests_app_version(
    configuration: &configuration::Configuration,
    x_session_id: &str,
    app: &str,
    version: &str,
) -> Result<
    ResponseContent<GetApiV2ManifestsAppVersionSuccess>,
    Error<GetApiV2ManifestsAppVersionError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/api/v2/manifests/{app}/{version}",
        local_var_configuration.base_path,
        app = crate::apis::urlencode(app),
        version = crate::apis::urlencode(version)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Session-Id", x_session_id.to_string());

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetApiV2ManifestsAppVersionSuccess> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetApiV2ManifestsAppVersionError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Login to console as user with password
pub async fn post_api_v2_auth_login(
    configuration: &configuration::Configuration,
    apiv2_auth_login_post_request: Option<models::Apiv2AuthLoginPostRequest>,
) -> Result<ResponseContent<PostApiV2AuthLoginSuccess>, Error<PostApiV2AuthLoginError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/auth/login", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&apiv2_auth_login_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<PostApiV2AuthLoginSuccess> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<PostApiV2AuthLoginError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Validate authentication token
pub async fn post_api_v2_auth_validate(
    configuration: &configuration::Configuration,
    apiv2_auth_validate_post_request: Option<models::Apiv2AuthValidatePostRequest>,
) -> Result<ResponseContent<PostApiV2AuthValidateSuccess>, Error<PostApiV2AuthValidateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/auth/validate", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&apiv2_auth_validate_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<PostApiV2AuthValidateSuccess> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<PostApiV2AuthValidateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create a download token for a given app and version
pub async fn post_api_v2_tokens(
    configuration: &configuration::Configuration,
    x_session_id: &str,
    post_api_v2_tokens_request: Option<models::PostApiV2TokensRequest>,
) -> Result<ResponseContent<PostApiV2TokensSuccess>, Error<PostApiV2TokensError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/tokens", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Session-Id", x_session_id.to_string());
    local_var_req_builder = local_var_req_builder.json(&post_api_v2_tokens_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<PostApiV2TokensSuccess> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<PostApiV2TokensError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
