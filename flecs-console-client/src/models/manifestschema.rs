/*
 * FLECS Console API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Manifestschema : Schema for the FLECS App Manifest
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Manifestschema {
    /// Version of the implemented FLECS App Manifest schema
    #[serde(rename = "_schemaVersion", skip_serializing_if = "Option::is_none")]
    pub _schema_version: Option<String>,
    /// Unique App identifier in reverse domain name notation
    #[serde(rename = "app")]
    pub app: String,
    /// App version, naturally sortable
    #[serde(rename = "version")]
    pub version: String,
    /// App manifest revision. Increment if Manifest is changed within the same App version
    #[serde(rename = "revision", skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
    /// Docker image for the App
    #[serde(rename = "image")]
    pub image: String,
    /// 'true' if App can be instantiated more than once (requires no editor, no ports)
    #[serde(rename = "multiInstance", skip_serializing_if = "Option::is_none")]
    pub multi_instance: Option<bool>,
    /// Port of App's web-based ui
    #[serde(rename = "editor", skip_serializing_if = "Option::is_none")]
    pub editor: Option<String>,
    /// Command line arguments passed to App entrypoint
    #[serde(rename = "args", skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Permissions required for the App to function correctly
    #[serde(rename = "capabilities", skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<std::collections::HashSet<Capabilities>>,
    /// Configuration files used by the App
    #[serde(rename = "conffiles", skip_serializing_if = "Option::is_none")]
    pub conffiles: Option<Vec<String>>,
    /// Devices passed through to the App instances
    #[serde(rename = "devices", skip_serializing_if = "Option::is_none")]
    pub devices: Option<Vec<String>>,
    /// Environment variables for the App instances
    #[serde(rename = "env", skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<String>>,
    /// DEPRECATED: true if App requires allocation of an interactive shell
    #[serde(rename = "interactive", skip_serializing_if = "Option::is_none")]
    pub interactive: Option<bool>,
    /// Port mappings for the App's instances (not allowed for multiInstance Apps)
    #[serde(rename = "ports", skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<String>>,
    /// Virtual volumes and bind mounts for an App's instances
    #[serde(rename = "volumes", skip_serializing_if = "Option::is_none")]
    pub volumes: Option<Vec<String>>,
    /// Labels for the App instances
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<String>>,
}

impl Manifestschema {
    /// Schema for the FLECS App Manifest
    pub fn new(app: String, version: String, image: String) -> Manifestschema {
        Manifestschema {
            _schema_version: None,
            app,
            version,
            revision: None,
            image,
            multi_instance: None,
            editor: None,
            args: None,
            capabilities: None,
            conffiles: None,
            devices: None,
            env: None,
            interactive: None,
            ports: None,
            volumes: None,
            labels: None,
        }
    }
}
/// Permissions required for the App to function correctly
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Capabilities {
    #[serde(rename = "DOCKER")]
    Docker,
    #[serde(rename = "NET_ADMIN")]
    NetAdmin,
    #[serde(rename = "SYS_NICE")]
    SysNice,
    #[serde(rename = "IPC_LOCK")]
    IpcLock,
    #[serde(rename = "NET_RAW")]
    NetRaw,
}

impl Default for Capabilities {
    fn default() -> Capabilities {
        Self::Docker
    }
}
