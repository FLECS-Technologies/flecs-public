openapi: 3.0.0
info:
  title: FLECS Daemon API
  version: 2.0.0
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

components:
  schemas:
    # Common schemas
    additionalInfo:
      type: object
      required:
        - additionalInfo
      description: Additional info
      properties:
        additionalInfo:
          type: string
    # App related schemas
    app_key:
      type: object
      required:
        - name
        - version
      properties:
        name:
          type: string
          example: tech.flecs.app-1
        version:
          type: string
          example: 1.2.3.4-f1
    app_status:
      type: string
      enum:
        [
          not installed,
          manifest downloaded,
          token acquired,
          image downloaded,
          installed,
          removed,
          purged,
          orphaned,
          unknown,
        ]
    installed_app:
      required:
        - appKey
        - status
        - desired
        - licenseKey
        - downloadToken
        - installedSize
        - multiInstance
        - editor
      properties:
        appKey:
          $ref: "#/components/schemas/app_key"
        status:
          $ref: "#/components/schemas/app_status"
        desired:
          $ref: "#/components/schemas/app_status"
        licenseKey:
          $ref: "#/components/schemas/app_status"
        downloadToken:
          $ref: "#/components/schemas/app_status"
        installedSize:
          type: integer
          example: 10485760
        multiInstance:
          type: boolean
        editor:
          type: string
    license_key:
      type: string
      description: License key for App installation
      example: "538E-A5E8-84A3-D798"
    # Instance related schemas
    instance_id:
      type: string
      pattern: "^[0-9a-f]{8}$"
      example: 01ab89ef
    instance_name:
      type: string
      description: Instance name
      example: "Smart home"
    instance_status:
      type: string
      enum:
        [
          not created,
          requested,
          resources ready,
          created,
          stopped,
          running,
          orphaned,
          unknown,
        ]
    app_instance:
      required:
        - instanceId
        - instanceName
        - appKey
        - status
        - desired
      description: Instance of an App
      properties:
        instanceId:
          $ref: "#/components/schemas/instance_id"
        instanceName:
          $ref: "#/components/schemas/instance_name"
        appKey:
          $ref: "#/components/schemas/app_key"
        status:
          $ref: "#/components/schemas/instance_status"
        desired:
          $ref: "#/components/schemas/instance_status"
    instance_detail_hostname:
      type: string
      description: Hostname of an instance
      example: "flecs-01ab89ef"
    instance_detail_ip_address:
      type: string
      description: IP address of an instance
      format: ipv4
      example: 172.21.0.3
    instance_detail_config_files:
      type: object
      required:
        - container
        - host
      properties:
        container:
          type: string
          example: "/etc/conf.d/configuration.cfg"
        host:
          type: string
          example: "/var/lib/flecs/instances/01ab89ef/conf/configuration.cfg"
    instance_detail_mounts:
      type: object
      required:
        - mounts
      description: Bind mounts of an instance
      properties:
        mounts:
          type: array
          items:
            type: object
            required:
              - container
              - host
            properties:
              container:
                type: string
                example: "/path/to/dir"
              host:
                type: string
                example: "/path/to/host/dir"
    instance_detail_port:
      type: object
      required:
        - container
        - host
      properties:
        container:
          type: string
          example: "8080"
        host:
          type: string
          example: "18080"
    instance_detail_volume:
      type: object
      required:
        - name
        - path
      properties:
        name:
          type: string
          example: "var"
        path:
          type: string
          example: "/var/app"
    instance_config_usb_device:
      type: object
      required:
        - device
        - pid
        - port
        - vendor
        - vid
        - active
        - connected
      properties:
        device:
          type: string
        pid:
          type: integer
        port:
          type: string
        vendor:
          type: string
        vid:
          type: integer
        active:
          type: boolean
        connected:
          type: boolean
    instance_config_network_adapter:
      type: object
      required:
        - name
        - active
        - connected
      properties:
        name:
          type: string
        active:
          type: boolean
        connected:
          type: boolean
        ipAddress:
          type: string
          format: ipv4
        subnetMask:
          type: string
          format: ipv4
        gateway:
          type: string
          format: ipv4
    instance_config:
      type: object
      required:
        - networkAdapters
        - devices
      properties:
        networkAdapters:
          type: array
          items:
            $ref: "#/components/schemas/instance_config_network_adapter"
        devices:
          type: object
          required:
            - usb
          properties:
            usb:
              type: array
              items:
                $ref: "#/components/schemas/instance_config_usb_device"
    # Job related schemas
    job_id:
      type: integer
      format: int32
      minimum: 1
      maximum: 4294967295
    job_status:
      type: string
      enum: [pending, queued, running, cancelled, successful, failed, unknown]
    job_step:
      type: object
      required:
        - description
        - num
        - unit
        - unitsTotal
        - unitsDone
        - rate
      properties:
        description:
          type: string
          example: Downloading...
        num:
          type: integer
          example: 3
        unit:
          type: integer
          example: B
        unitsTotal:
          type: integer
          example: 10485761
        unitsDone:
          type: integer
          example: 5120000
        rate:
          type: integer
          example: 2048
    job_result:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          example: -1
        message:
          type: string
          example: Explanation what went wrong
    job:
      type: object
      required:
        - id
        - status
        - description
        - numSteps
        - currentStep
        - result
      properties:
        id:
          $ref: "#/components/schemas/job_id"
        status:
          $ref: "#/components/schemas/job_status"
        description:
          type: string
          example: Installation of FLECS App 1 (1.2.3.4-f1)
        numSteps:
          type: integer
          example: 5
        currentStep:
          $ref: "#/components/schemas/job_step"
        result:
          $ref: "#/components/schemas/job_result"
    job_meta:
      type: object
      required:
        - jobId
      description: Job metadata for accepted requests
      properties:
        jobId:
          type: integer
          example: 17
    # System related schemas
    system_distro:
      type: object
      required:
        - codename
        - id
        - name
        - version
      properties:
        codename:
          type: string
          example: "bookworm"
        id:
          type: string
          example: "debian"
        name:
          type: string
          example: "Debian GNU/Linux 12 (bookworm)"
        version:
          type: string
          example: "12"
    system_kernel:
      type: object
      required:
        - build
        - machine
        - version
      properties:
        build:
          type: string
        machine:
          type: string
          example: "x86_64"
        version:
          type: string
          example: "6.7.6-arch1-1"
    system_info:
      type: object
      required:
        - arch
        - distro
        - kernel
        - platform
      properties:
        arch:
          type: string
          example: "amd64"
        distro:
          $ref: "#/components/schemas/system_distro"
        kernel:
          $ref: "#/components/schemas/system_kernel"
        platform:
          type: string
  # Common responses
  responses:
    response_202:
      description: Accepted
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/job_meta"
    response_400:
      description: Malformed request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/additionalInfo"
    response_401:
      description: Unauthorized
    response_403:
      description: Forbidden
    response_404:
      description: Resource not found
    response_500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/additionalInfo"

tags:
  - name: "Apps"
    x-displayName: "Apps"
    description: Install, manage and uninstall Apps
  - name: "Instances"
    x-displayName: "Instances"
    description: Create, manage and delete Instances
  - name: "Jobs"
    x-displayName: "Jobs"
    description: Management of asynchronous jobs
  - name: "flunder"
    x-displayName: "Service Mesh"
    description: |
      FLECS Service Mesh a.k.a flunder (<b>FL</b>ecs <b>UN</b>ified <b>D</b>ata <b>E</b>xchange and <b>R</b>etention)
  - name: "System"
    x-displayName: "System"
  - name: "Device"
    x-displayName: "Device"

paths:
  # App related paths
  /apps:
    get:
      tags: ["Apps"]
      summary: Query installed Apps
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/installed_app"
  /apps/{app}:
    get:
      tags: ["Apps"]
      summary: Query all versions or specific versions of an App
      parameters:
        - name: app
          in: path
          schema:
            type: string
            description: App to query
          required: true
        - name: version
          in: query
          schema:
            type: string
            description: App version to query
          required: false
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/installed_app"
        "404":
          description: No such app or app/version combination
    delete:
      tags: ["Apps"]
      summary: Uninstall one or all versions an App
      parameters:
        - name: app
          in: path
          schema:
            type: string
            description: App to uninstall
          required: true
        - name: version
          in: query
          schema:
            type: string
            description: App version to uninstall
          required: false
      responses:
        "202":
          $ref: "#/components/responses/response_202"
        "404":
          description: No such app or app/version combination
  /apps/install:
    post:
      tags: ["Apps"]
      summary: Install an App from the FLECS marketplace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - appKey
              properties:
                appKey:
                  $ref: "#/components/schemas/app_key"
      responses:
        "202":
          $ref: "#/components/responses/response_202"
        "400":
          $ref: "#/components/responses/response_400"
        "500":
          $ref: "#/components/responses/response_500"
  /apps/sideload:
    post:
      tags: ["Apps"]
      summary: Sideload an App from its manifest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - manifest
                - licenseKey
              properties:
                manifest:
                  type: string
      responses:
        "202":
          $ref: "#/components/responses/response_202"
        "400":
          $ref: "#/components/responses/response_400"
  # Instance related paths
  /instances:
    get:
      tags: ["Instances"]
      summary: Query all instances of one or all Apps
      parameters:
        - name: app
          in: query
          schema:
            type: string
            description: App to query instances for
          required: false
        - name: version
          in: query
          schema:
            type: string
            description: App version to query instances for
          required: false
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/app_instance"
  /instances/{instance_id}:
    get:
      tags: ["Instances"]
      summary: Obtain details of an App instance
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - instanceId
                  - appKey
                  - status
                  - desired
                  - ipAddress
                  - configFiles
                  - hostname
                  - ports
                  - volumes
                  - instanceName
                properties:
                  instanceId:
                    $ref: "#/components/schemas/instance_id"
                  instanceName:
                    $ref: "#/components/schemas/instance_name"
                  appKey:
                    $ref: "#/components/schemas/app_key"
                  status:
                    $ref: "#/components/schemas/instance_status"
                  desired:
                    $ref: "#/components/schemas/instance_status"
                  configFiles:
                    $ref: "#/components/schemas/instance_detail_config_files"
                  hostname:
                    $ref: "#/components/schemas/instance_detail_hostname"
                  ipAddress:
                    $ref: "#/components/schemas/instance_detail_ip_address"
                  ports:
                    description: Allocated network ports of an instance
                    type: array
                    items:
                      $ref: "#/components/schemas/instance_detail_port"
                  volumes:
                    description: Automatic volumes of an instance
                    type: array
                    items:
                      $ref: "#/components/schemas/instance_detail_volume"
        "404":
          description: No instance with this instance_id found
        "500":
          $ref: "#/components/responses/response_500"
    patch:
      tags: ["Instances"]
      summary: Update or downgrade Instance to another App version
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - to
              properties:
                to:
                  type: string
      responses:
        "202":
          $ref: "#/components/responses/response_202"
        "404":
          description: No instance with this instance_id found
    delete:
      tags: ["Instances"]
      summary: Delete a single instance
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
      responses:
        "202":
          $ref: "#/components/responses/response_202"
        "404":
          description: No instance with this instance_id found
  /instances/create:
    post:
      tags: ["Instances"]
      summary: Create new instance of an installed App
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - appKey
              properties:
                appKey:
                  $ref: "#/components/schemas/app_key"
                instanceName:
                  $ref: "#/components/schemas/instance_name"
      responses:
        "202":
          $ref: "#/components/responses/response_202"
        "400":
          $ref: "#/components/responses/response_400"
  /instances/{instance_id}/start:
    post:
      tags: ["Instances"]
      summary: Start an App instance
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
      responses:
        "202":
          $ref: "#/components/responses/response_202"
        "404":
          description: No instance with this instance_id found
  /instances/{instance_id}/stop:
    post:
      tags: ["Instances"]
      summary: Stop an App instance
      parameters:
        - name: instance_id
          in: path
          schema:
            type: string
            description: Instance id to delete
          required: true
      responses:
        "202":
          $ref: "#/components/responses/response_202"
        "404":
          description: No instance with this instance_id found
  /instances/{instance_id}/config:
    get:
      tags: ["Instances"]
      summary: Get configuration of an Instance
      parameters:
        - name: instance_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/instance_config"
        "404":
          description: No instance with this instance_id found
    post:
      tags: ["Instances"]
      summary: Update configuration of an Instance
      parameters:
        - name: instance_id
          in: path
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/instance_config"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/instance_config"
        "404":
          description: No instance with this instance_id found
  /instances/{instance_id}/logs:
    get:
      tags: ["Instances"]
      summary: Retrieve logs of an Instance
      parameters:
        - name: instance_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - stdout
                  - stderr
                properties:
                  stdout:
                    type: string
                  stderr:
                    type: string
        "404":
          description: No instance with this instance_id found
        "500":
          $ref: "#/components/responses/response_500"
  # flunder related paths
  /flunder/browse:
    get:
      tags: ["flunder"]
      summary: Retrieve stored flunder topics alongside their values
      parameters:
        - name: q
          in: query
          schema:
            type: string
            example: "/flecs/**"
          required: false
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - additionalInfo
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      required:
                        - key
                        - value
                        - encoding
                        - timestamp
                      properties:
                        key:
                          type: string
                          example: "/flecs/app1/heater0/temperature"
                        value:
                          type: string
                          example: "23"
                        encoding:
                          type: string
                          example: "application/integer+s8"
                        timestamp:
                          type: string
                          example:
                  additionalInfo:
                    type: string
                    example: "Explanation what went wrong"
        "500":
          $ref: "#/components/responses/response_500"
  # Job related paths
  /jobs:
    get:
      tags: ["Jobs"]
      summary: Retrieve a list of all pending/queued/running/failed/cancelled jobs
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/job"
  /jobs/{job_id}:
    get:
      tags: ["Jobs"]
      summary: Retrieve information for specific job_id
      parameters:
        - name: job_id
          in: path
          schema:
            type: integer
            description: job_id to query
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/job"
        "404":
          description: Not found
    delete:
      tags: ["Jobs"]
      summary: Cancel job or remove failed/successful/cancelled job from journal
      parameters:
        - name: job_id
          in: path
          schema:
            type: integer
            description: job_id to query
          required: true
      responses:
        "200":
          description: Success
        "404":
          description: Not found
        "400":
          description: Job not finished
          content:
            text/plain:
              schema:
                type: string
  # System related paths
  /system/ping:
    get:
      tags: ["System"]
      summary: Check daemon availability and connectivity
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/additionalInfo"
  /system/version:
    get:
      tags: ["System"]
      summary: Get FLECS core and API version
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - api
                  - core
                properties:
                  api:
                    type: string
                    example: "2.0.0"
                  core:
                    type: string
                    example: "v2.0.0-???"
  /system/info:
    get:
      tags: ["System"]
      summary: Get architecture and operating system information
      responses:
        "200":
          description: Sucess
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/system_info"
  # Device related paths
  /device/license/activation:
    post:
      tags: ["Device"]
      summary: Execute device activation
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/additionalInfo"
        "500":
          $ref: "#/components/responses/response_500"
  /device/license/activation/status:
    get:
      tags: ["Device"]
      summary: Check if device is activated
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - isValid
                properties:
                  isValid:
                    type: boolean
                    example: true
        "500":
          $ref: "#/components/responses/response_500"
