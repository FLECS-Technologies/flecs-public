openapi: 3.1.0
info:
  title: FLECS Daemon API
  version: 2.0.0
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

components:
  schemas:
    additionalInfo:
      type: object
      description: Additional info
      properties:
        additionalInfo:
          type: string
    app:
      type: object
      description: App name
      additionalProperties:
        type: string
        example: "tech.flecs.app"
    conffiles:
      type: object
      description: Bind-mounted configuration files of an instance
      properties:
        conffiles:
          type: array
          items:
            type: object
            properties:
              container:
                type: string
                example: "/etc/conf.d/configuration.cfg"
              host:
                type: string
                example: "/var/lib/flecs/instances/0123abcd/conf/configuration.cfg"
    hostname:
      type: object
      description: Hostname of an instance
      properties:
        hostname:
          type: string
          example: flecs-0123abcd
    instanceId:
      type: object
      description: Instance ID
      properties:
        instanceId:
          type: string
          example: "87654fed"
    instanceName:
      type: object
      description: Instance name
      properties:
        instanceName:
          type: string
          example: "Smart home"
    ipAddress:
      type: object
      description: IP address of an instance
      properties:
        ipAddress:
          type: string
          example: "172.21.0.2"
    job:
      type: object
      properties:
        id:
          type: integer
          example: 1234
        status:
          type: string
          example: pending
        description:
          type: string
          example: Installation of app tech.flecs.app-1 (1.2.3.4-f1)
        numSteps:
          type: integer
          example: 5
        currentStep:
          type: object
          properties:
            description:
              type: string
              example: Downloading...
            num:
              type: integer
              example: 3
            unit:
              type: integer
              example: B
            unitsTotal:
              type: integer
              example: 10485761
            unitsDone:
              type: integer
              example: 5120000
            rate:
              type: integer
              example: 2048
        result:
          type: object
          properties:
            code:
              type: integer
              example: -1
            message:
              type: string
              example: Could not download app...
    job_meta:
      type: object
      description: Job metadata for accepted requests
      properties:
        jobId:
          type: integer
          example: 17
    licenseKey:
      type: object
      description: License key for App installation
      properties:
        licenseKey:
          type: string
          example: "538E-A5E8-84A3-D798"
    mounts:
      type: object
      description: Bind mounts of an instance
      properties:
        mounts:
          type: array
          items:
            type: object
            properties:
              container:
                type: string
                example: "/path/to/dir"
              host:
                type: string
                example: "/path/to/host/dir"
    ports:
      type: object
      description: Allocated network ports of an instance
      properties:
        ports:
          type: array
          items:
            type: object
            properties:
              container:
                type: string
                example: "8080"
              host:
                type: string
                example: "18080"
    version:
      type: object
      description: App version
      properties:
        version:
          type: string
          example: "v4.0.6"
    volumes:
      type: object
      description: Automatic volumes of an instance
      properties:
        volumes:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: "var"
              path:
                type: string
                example: "/var/app"

    installed_app:
      type: object
      description: Installed App metadata
      additionalProperties:
        type: object
        additionalProperties:
          properties:
            desired:
              type: string
              example: "installed"
            status:
              type: string
              example: "installed" # todo: refine possible values
            installedSize:
              type: integer
              example: 10485760
    app_instances:
      type: object
      description: App instances
      allOf:
        - type: object
          properties:
            desired:
              type: string
              example: "running"
        - $ref: "#/components/schemas/instanceId"
        - $ref: "#/components/schemas/instanceName"
        - type: object
          properties:
            status:
              type: string
              example: "running" # todo: refine possible values
        - $ref: "#/components/schemas/version"

  responses:
    response_202:
      description: Accepted
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/job_meta"
    response_400:
      description: Malformed request
      content:
        application/json:
          schema:
            type: object
            properties:
              additionalInfo:
                type: string
                example: "Details what is wrong"
    response_401:
      description: Unauthorized
    response_403:
      description: Forbidden
    response_500:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              additionalInfo:
                type: string
                example: "Explanation what went wrong"

tags:
  - name: "Apps"
    x-displayName: "Apps"
    description: Install, manage and uninstall Apps
  - name: "Instances"
    x-displayName: "Instances"
    description: Create, manage and delete Instances
  - name: "flunder"
    x-displayName: "Service Mesh"
    description: |
      FLECS Service Mesh a.k.a flunder (<b>FL</b>ecs <b>UN</b>ified <b>D</b>ata <b>E</b>xchange and <b>R</b>etention)
  - name: "System"
    x-displayName: "System"

paths:
  /apps/install:
    put:
      tags: ["Apps"]
      summary: Install an App from the FLECS marketplace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    app:
                      type: string
                      example: "tech.flecs.app"
                - $ref: "#/components/schemas/licenseKey"
                - $ref: "#/components/schemas/version"
      responses:
        "202":
          $ref: "#/components/responses/response_202"
        "400":
          $ref: "#/components/responses/response_400"
        "500":
          $ref: "#/components/responses/response_500"

  /apps/sideload:
    put:
      tags: ["Apps"]
      summary: Sideload an App from its manifest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                manifest:
                  type: string
                licenseKey:
                  type: string
      responses:
        "202":
          $ref: "#/components/responses/response_202"
        "400":
          $ref: "#/components/responses/response_400"
        "500":
          $ref: "#/components/responses/response_500"

  /apps:
    get:
      tags: ["Apps"]
      summary: Query installed Apps
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/installed_app"

  /apps/{app}:
    get:
      tags: ["Apps"]
      summary: Query installed versions of an App
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/installed_app"
    delete:
      tags: ["Apps"]
      summary: Uninstall one or all versions an App
      parameters:
        - name: app
          in: path
          schema:
            type: string
            description: App to uninstall
          required: true
        - name: version
          in: query
          schema:
            type: string
            description: App version to uninstall
          required: false
      responses:
        "202":
          $ref: "#/components/responses/response_202"
        "400":
          $ref: "#/components/responses/response_400"
        "500":
          $ref: "#/components/responses/response_500"

  /instances:
    get:
      tags: ["Instances"]
      summary: Query all instances of one or all Apps
      parameters:
        - name: app
          in: query
          schema:
            type: string
            description: App to query instances for
          required: false
        - name: version
          in: query
          schema:
            type: string
            description: App version to query instances for
          required: false

  /instances/create:
    post:
      tags: ["Instances"]
      summary: Create new instance of an installed App
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/app"
                - $ref: "#/components/schemas/instanceName"
                - $ref: "#/components/schemas/version"
      responses:
        "202":
          $ref: "#/components/responses/response_202"
        "400":
          $ref: "#/components/responses/response_400"
        "500":
          $ref: "#/components/responses/response_500"

  /instance/{id}/delete:
    delete:
      tags: ["Instances"]
      summary: Delete an App instance
      parameters:
        - name: id
          in: path
          schema:
            type: string
            description: Instance id to delete
          required: true
      responses:
        "202":
          $ref: "#/components/responses/response_202"
        "400":
          $ref: "#/components/responses/response_400"
        "500":
          $ref: "#/components/responses/response_500"

  /instance/{id}/details:
    get:
      tags: ["Instances"]
      summary: Obtain details of an App instance
      parameters:
        - name: id
          in: path
          schema:
            type: string
            description: Instance id to delete
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/additionalInfo"
                  - $ref: "#/components/schemas/app"
                  - $ref: "#/components/schemas/conffiles"
                  - $ref: "#/components/schemas/hostname"
                  - $ref: "#/components/schemas/instanceId"
                  - $ref: "#/components/schemas/ipAddress"
                  - $ref: "#/components/schemas/mounts"
                  - $ref: "#/components/schemas/ports"
                  - $ref: "#/components/schemas/version"
                  - $ref: "#/components/schemas/volumes"
        "400":
          $ref: "#/components/responses/response_400"

  /instance/{id}/start:
    post:
      tags: ["Instances"]
      summary: Start an App instance
      parameters:
        - name: id
          in: path
          schema:
            type: string
            description: Instance id to delete
          required: true
      responses:
        "202":
          $ref: "#/components/responses/response_202"
        "400":
          $ref: "#/components/responses/response_400"
        "500":
          $ref: "#/components/responses/response_500"

  /instance/{id}/stop:
    post:
      tags: ["Instances"]
      summary: Stop an App instance
      parameters:
        - name: id
          in: path
          schema:
            type: string
            description: Instance id to delete
          required: true
      responses:
        "202":
          $ref: "#/components/responses/response_202"
        "400":
          $ref: "#/components/responses/response_400"
        "500":
          $ref: "#/components/responses/response_500"

  /flunder/browse:
    get:
      tags: ["flunder"]
      summary: Retrieve stored flunder topics alongside their values
      parameters:
        - name: q
          in: query
          schema:
            type: string
            example: "/flecs/**"
          required: false
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        topic:
                          type: string
                          example: "/flecs/app1/heater0/temperature"
                        value:
                          type: string
                          example: "23"
                        encoding:
                          type: string
                          example: "application/integer+s8"
                        timestamp:
                          type: string
                          example:

  /flunder/{topic}:
    get:
      tags: ["flunder"]
      summary: Retrieve value of a stored flunder topic
      parameters:
        - name: topic
          in: path
          schema:
            type: string
            example: "/flecs/app1/heater0/temperature"
          required: true
    put:
      tags: ["flunder"]
      summary: Publish a topic to flunder
      parameters:
        - name: topic
          in: path
          schema:
            type: string
            example: "/flecs/app1/heater0/temperature"
          required: true
        - name: value
          in: query
          schema:
            type: string
            example: "23"
        - name: type
          in: query
          schema:
            type: string
            example: "bool"
    delete:
      tags: ["flunder"]
      summary: Delete a stored flunder topic
      parameters:
        - name: topic
          in: path
          schema:
            type: string
            example: "/flecs/app1/heater0/temperature"
          required: true

  /jobs:
    get:
      tags: ["Jobs"]
      summary: Retrieve a list of all pending/queued/running/failed/cancelled jobs
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/job"

  /jobs/{job_id}:
    get:
      tags: ["Jobs"]
      summary: Retrieve information for specific {job_id}
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/job"
        "404":
          description: Not found
    delete:
      tags: ["Jobs"]
      summary: Cancel jov or remove failed/successful/cancelled job from journal
      responses:
        "200":
          description: Success
        "404":
          description: Not found

  /system/ping:
    get:
      tags: ["System"]
      summary: Check daemon availability and connectivity
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  additionalInfo:
                    type: string
                    example: "OK"

  /system/version:
    get:
      tags: ["System"]
      summary: Get FLECS core and API version
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  api:
                    type: string
                    example: "2.0.0"
                  core:
                    type: string
                    example: "v2.0.0-???"
