#!/bin/sh

### BEGIN INIT INFO
# Provides:          flecs-backend
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start flecs-backend at boot time
# Description:       Enable service provided by daemon.
### END INIT INFO

SCRIPTNAME=$(readlink -f ${0})

BINARY=flecs-backend
DAEMON=/usr/bin/${BINARY}
PIDFILE=${RUN}/${BINARY}.pid

[ ! -x "${DAEMON}" ] && exit 5

print_usage() {
    echo "Usage: $(basename ${SCRIPTNAME}) {start|stop|restart|try-restart|force-reload|status}";
    exit 1;
}

run() {
    $* || exit 1;
}

do_kill() {
    SIG=$1
    TIMEOUT=$2
    SECONDS=0
    while [ $SECONDS -lt $TIMEOUT ]; do
        kill -${SIG} ${PID} 2>/dev/null
        if [ ! -d /proc/${PID} ]; then
            return 0;
        fi
        SECONDS=$((SECONDS+1));
        sleep 1;
    done
}

do_start() {
    run mkdir -p ${RUN};
    ${DAEMON} &
    echo $! >${PIDFILE}
    exit 0
}

do_stop() {
    do_kill 15 90
    if [ ! -d /proc/${PID} ]; then
        return 0;
    fi
    echo "Warning: SIGTERM timed out - sending SIGKILL"

    do_kill 9 15
    if [ ! -d /proc/${PID} ]; then
        return 0;
    fi
    echo "Warning: SIGKILL timed out - failed to stop service"

    return 1;
}

# Function: do_status
# Check if service is running and return its status:
#   0 service is up and running
#   1 service is dead, but PIDFILE exists
#   3 service is not running
do_status() {
    # if PIDFILE does not exist, consider service not running
    if [ ! -f "${PIDFILE}" ]; then
        return 3;
    fi

    PID=$(cat ${PIDFILE})
    # if PIDFILE is empty, consider service not running
    if [ -z "${PID}" ]; then
        return 3;
    fi

    # if no directory exists under /proc for valid PID, consider service dead
    if [ ! -d /proc/${PID} ]; then
        return 1;
    fi

    return 0;
}

case $1 in
    start)
        # exit successfully if service is already running
        if do_status; then
            echo "${BINARY} is already running";
            exit 0;
        fi
        do_start
        ;;
    stop)
        # exit successfully is service is not running
        if ! do_status; then
            echo "${BINARY} is not running";
            exit 0;
        fi
        do_stop
        ;;
    restart)
        # stop service if it is running, then perform start
        do_status && do_stop
        do_start
        ;;
    try-restart)
        # exit successfully is service is not running; otherwise stop and start it
        do_status || exit 0
        do_stop
        do_start
        ;;
    reload)
        # unsupported action
        exit 3;
        ;;
    force-reload)
        echo "Warning: unsupported action $1; performing restart instead"
        do_status && do_stop
        do_start
        ;;
    status)
        if do_status; then
            echo "${BINARY} is running";
        else
            echo "${BINARY} is not running";
        fi
        ;;
    *)
        print_usage
        ;;
esac
