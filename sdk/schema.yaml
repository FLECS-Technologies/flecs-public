#
# Copyright (c) 2021 FLECS Technologies GmbH
#
# Created on Mon Dec 06 2021
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

%YAML 1.2
---
$schema: "http://json-schema.org/draft-07/schema"
$id: "https://flecs-technologies.com/schemas/yaml/app"
title: Schema for the FLECS App-SDK
description: Every app for FLECS is described by a simple .yml. It holds information about the app, the author(s) and some technical information, which FLECS needs to install and deploy this app.

type: object
properties:
  # app: This is the app identifier noted as reverse domain name. 
  app:
    type: string
    pattern: '^[a-z][a-z0-9.\-_]+[a-z]$'
    description: App identifier in reverse domain name notation, only lower case letters, format e.g. com.xyz-123.app-name
  title:
  # title: Title of the app, which shall appear as the displayed title at the FLECS Marketplace 
    type: string
    pattern: '^[[:alnum:][:space:][:punct:]]{1,35}$'
    description: Name of the app (max. 35 characters)
  # version: Version of the app noted in semantic versioning.
  version:
    type: string
    pattern: '^([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$'
    description: Version of this app noted in semantic versioning. E.g. 1.2.3-alpha.something+meta-data
  # description: This is a very short description of the app which will appear in the FLECS Marketplace at every app.
  description:
    type: string
    pattern: '^[[:alnum:][:space:][:punct:]]{1,35}$'
    description: Short description of the app (max. 35 characters)
  # author: Author of the app. Can be a company, a single person, or a group.
  author:
    type: string
    pattern: '^[[:alnum:][:space:][:punct:]]{1,35}$'
    description: Author of the app (max. 35 characters)
  # avatar: Link to an avatar image of the app. The avatar is displayed as a round avatar at the app in the FLECS Marketplace
  avatar:
    type: string
    pattern: '^((https?:\/\/)?[^\s.]+\.[\w][^\s]+)$'
    description: Link to an avatar image of the app. The avatar is displayed as round avatar at the app in the FLECS Marketplace
  # editor: Relative link to an editor of the app. 
  editor:
    type: string
    pattern: '(:(\d+))?((?:\/[\w]+)*)'
    description: > 
      Relative link to an editor of the app. E.g. ":8080", or "/my-app-editor", or ":1900/my-app-editor"
  # category: Category of the app. 
  category:
    enum:
      ["database", "visualization", "logging", "plc", "system", "communication", "scada"]
    description: Category of the app.
  # image: location where the image of the app can be found.
  image:
    type: string
    # Valide Docker image
    # Pattern found at https://regex101.com/r/a98UqN/1
    # valid inputs:
    # alpine
    # alpine:latest
    # _/alpine
    # _/alpine:latest
    # alpine:3.7
    # docker.example.com/gmr/alpine:3.7
    # docker.example.com:5000/gmr/alpine:latest
    # pse/anabroker:latest
    pattern: '^(?P<repository>[\w.\-_]+((?::\d+|)(?=/[a-z0-9._-]+/[a-z0-9._-]+))|)(?:/|)(?P<image>[a-z0-9.\-_]+(?:/[a-z0-9.\-_]+|))(:(?P<tag>[\w.\-_]{1,127})|)$'
    description: Place where FLECS can find the image of the app
  # multiInstance: Boolean parameter to state if there can be more than one instance running on the same machine. TRUE: multiple instances are possible. FALSE: only one instance can be started on the same machine.
  multiInstance:
    type: bool
    description: Can there be multiple instances of this app running on the same machine? TRUE if multiple instances can run on the same machine, FALSE else.
  # volumes: the volumes the app needs to have mounted.
  volumes:
    type: array
    items: 
      type: string
      # valid paths: /path/to/dir:/path/to/container/dir
      # or dir:/path/to/container/dir
      pattern: '/^((\/)?[a-zA-Z]+)+:\/([a-zA-Z]+(\/[a-zA-Z]+)+)$/'
    description: All volumes the app image needs to work properly.
  # ports: the ports the app needs to communicate with the world outside the image.
  ports:
    type: array
    items:
      type: string
      # not configurable: <host-port>:<contanier-port>
      # or configurable: <container-port>
      pattern: '^([0-9]*)\:([0-9]*)$'
    description: All ports the app image needs to communicate with the world outside the image.
  interactive:
    type: bool
    description: Set to true if container needs stdin attached
required:
  app,
  title,
  version,
  description,
  author,
  category,
  image,
  multiInstance,
  volumes
  ports