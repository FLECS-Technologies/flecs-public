openapi: 3.1.0
info:
  title: FLECS Daemon API
  version: 2.0.0
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: 'http://{address}/{version}'
    variables:
      address:
        description: IP Adress of FLECS Daemon
        default: localhost
      version:
        description: API Version
        default: v2
components:
  schemas:
    # Common schemas
    app_manifest:
      $ref: "https://raw.githubusercontent.com/FLECS-Technologies/app-manifest/refs/heads/3.1.0/manifest.schema.json"
    additionalInfo:
      type: object
      required:
        - additionalInfo
      description: Additional info
      properties:
        additionalInfo:
          type: string
    optionalAdditionalInfo:
      type: object
      description: Additional info
      properties:
        additionalInfo:
          type: string
    id:
      type: string
      pattern: "^[0-9a-f]{8}(?:-[0-9a-f]{4}){3}-[0-9a-f]{12}$"
    port:
      type: integer
      minimum: 1
      maximum: 65535
    port_path_parameter:
      type: string
      pattern: "^[0-9]+(?:-[0-9]+)?$"
      example: "8000-8080"
    transport_protocol:
      type: string
      enum: [ tcp, udp, sctp ]
    sessionId:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        timestamp:
          type: integer
          minimum: 0
          maximum: 9223372036854775807
    # App related schemas
    app_key:
      type: object
      required:
        - name
        - version
      properties:
        name:
          type: string
          example: tech.flecs.app-1
        version:
          type: string
          example: 1.2.3.4-f1
    app_status:
      type: string
      enum:
        [
          not installed,
          manifest downloaded,
          token acquired,
          image downloaded,
          installed,
          removed,
          purged,
          orphaned,
          unknown,
        ]
    installed_app:
      required:
        - appKey
        - status
        - desired
        - licenseKey
        - downloadToken
        - installedSize
        - multiInstance
      properties:
        appKey:
          $ref: "#/components/schemas/app_key"
        status:
          $ref: "#/components/schemas/app_status"
        desired:
          $ref: "#/components/schemas/app_status"
        installedSize:
          type: integer
          example: 10485760
        multiInstance:
          type: boolean
    license_key:
      type: string
      description: License key for App installation
      example: "538E-A5E8-84A3-D798"
    # Authentication related schemas
    auth_protocol:
      type: string
      enum: [ oidc ]
    # Console related schemas
    user:
      type: object
      required:
        - ID
        - user_email
        - user_login
        - display_name
      properties:
        ID:
          type: integer
          minimum: 0
        user_email:
          type: string
          format: email
        user_login:
          type: string
        display_name:
          type: string
    jwt:
      type: object
      required:
        - token
        - token_expires
      properties:
        token:
          type: string
        token_expires:
          type: integer
          minimum: 0
    featureFlags:
      type: object
      required:
        - isVendor
        - isWhitelabeled
      properties:
        isVendor:
          type: boolean
        isWhitelabeled:
          type: boolean
    auth_response_data:
      type: object
      required:
        - user
        - jwt
        - feature_flags
      properties:
        user:
          $ref: "#/components/schemas/user"
        jwt:
          $ref: "#/components/schemas/jwt"
        feature_flags:
          $ref: "#/components/schemas/featureFlags"
    # Export related schemas
    export_id:
      type: string
      pattern: "^[a-zA-Z0-9_\\-\\.#]+$"
    export_request:
      type: object
      properties:
        apps:
          type: array
          items:
            $ref: "#/components/schemas/app_key"
        instances:
          type: array
          items:
            $ref: "#/components/schemas/instance_id"
      required:
        - apps
    # Instance related schemas
    instance_id:
      type: string
      pattern: "^[0-9a-f]{8}$"
      example: 01ab89ef
    instance_name:
      type: string
      description: Instance name
      example: "Smart home"
    instance_status:
      type: string
      enum:
        [
          not created,
          requested,
          resources ready,
          created,
          stopped,
          running,
          orphaned,
          unknown,
        ]
    instance_editor:
      type: object
      required:
        - name
        - url
        - port
      properties:
        name:
          type: string
          description: "Descriptive name of the editor"
          example: "Example app user settings"
        port:
          $ref: "#/components/schemas/port"
        path_prefix:
          type: string
          description: "Prefix that should be shown in the url path of the editor"
          example: "db_admin_dashboard"
        url:
          type: string
          description: "Link to the editor of an instance"
          example: "/api/v2/instances/abcd1234/editor/8080"
    instance_editors:
      type: array
      items:
        $ref: "#/components/schemas/instance_editor"
    app_instance:
      required:
        - instanceId
        - instanceName
        - appKey
        - status
        - desired
      description: Instance of an App
      properties:
        instanceId:
          $ref: "#/components/schemas/instance_id"
        instanceName:
          $ref: "#/components/schemas/instance_name"
        appKey:
          $ref: "#/components/schemas/app_key"
        status:
          $ref: "#/components/schemas/instance_status"
        desired:
          $ref: "#/components/schemas/instance_status"
        editors:
          $ref: "#/components/schemas/instance_editors"
    instance_detail_hostname:
      type: string
      description: Hostname of an instance
      example: "flecs-01ab89ef"
    instance_detail_ip_address:
      type: string
      description: IP address of an instance
      format: ipv4
      example: 172.21.0.3
    instance_detail_config_files:
      type: array
      items:
        $ref: "#/components/schemas/instance_detail_config_file"
    instance_detail_config_file:
      type: object
      required:
        - container
        - host
      properties:
        container:
          type: string
          example: "/etc/conf.d/configuration.cfg"
        host:
          type: string
          example: "/var/lib/flecs/instances/01ab89ef/conf/configuration.cfg"
    instance_detail_mounts:
      type: object
      required:
        - mounts
      description: Bind mounts of an instance
      properties:
        mounts:
          type: array
          items:
            type: object
            required:
              - container
              - host
            properties:
              container:
                type: string
                example: "/path/to/dir"
              host:
                type: string
                example: "/path/to/host/dir"
    instance_detail_port:
      type: object
      required:
        - container
        - host
      properties:
        container:
          type: string
          example: "8080"
        host:
          type: string
          example: "18080"
    instance_detail_volume:
      type: object
      required:
        - name
        - path
      properties:
        name:
          type: string
          example: "var"
        path:
          type: string
          example: "/var/app"
    bind_mount:
      type: object
      required:
        - container
        - host
      properties:
        container:
          type: string
          example: "/path/to/dir"
        host:
          type: string
          example: "/path/to/host/dir"
    mounts:
      type: object
      properties:
        bind_mounts:
          type: array
          items:
            $ref: "#/components/schemas/bind_mount"
        volume_mounts:
          type: array
          items:
            $ref: "#/components/schemas/instance_detail_volume"
    usb_port:
      type: string
      pattern: "^usb[1-9][0-9]*|[1-9][0-9]*-[1-9][0-9]*(?:\\.[1-9][0-9]*)*$"
    instance_config_usb_device:
      type: object
      properties:
        port:
          $ref: "#/components/schemas/usb_port"
        name:
          type: string
        pid:
          type: integer
        vendor:
          type: string
        vid:
          type: integer
        device_connected:
          type: boolean
      required:
        - port
        - device_connected
    usb_device:
      type: object
      required:
        - name
        - pid
        - port
        - vendor
        - vid
      properties:
        name:
          type: string
        pid:
          type: integer
        port:
          $ref: "#/components/schemas/usb_port"
        vendor:
          type: string
        vid:
          type: integer
    devices:
      type: object
      properties:
        usb:
          type: array
          items:
            $ref: "#/components/schemas/usb_device"
    network_kind:
      type: string
      enum: [
        internal,
        bridge,
        macvlan,
        ipvlanl2,
        ipvlanl3
      ]
    ipam:
      type: object
      properties:
        ipv4:
          $ref: "#/components/schemas/ipv4_ipam"
    post_deployment_network:
      type: object
      required:
        - network_id
        - network_kind
      properties:
        network_id:
          type: string
        network_kind:
          $ref: "#/components/schemas/network_kind"
        options:
          type: object
          additionalProperties:
            type: string
        parent_adapter:
          type: string
        ipam:
          $ref: "#/components/schemas/ipam"
    deployment_network:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        driver:
          type: string
        ipam:
          $ref: "#/components/schemas/ipam"
        parent:
          type: string
    ipv4_address:
      type: string
      format: ipv4
      example: 172.31.0.42
    ipv4_netmask:
      type: string
      format: ipv4
      example: 255.255.0.0
    ipv4_gateway:
      type: string
      format: ipv4
      example: 172.31.0.1
    ipv6_address:
      type: string
      format: ipv6
    mac_address:
      type: string
      pattern: '^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$'
    ipv4_network:
      type: object
      required:
        - address
        - netmask
      properties:
        address:
          $ref: "#/components/schemas/ipv4_address"
        netmask:
          $ref: "#/components/schemas/ipv4_netmask"
    ipv4_ipam:
      type: object
      required:
        - address
        - netmask
      properties:
        address:
          $ref: "#/components/schemas/ipv4_address"
        netmask:
          $ref: "#/components/schemas/ipv4_netmask"
        gateway:
          $ref: "#/components/schemas/ipv4_gateway"
    ipv6_network:
      type: object
      required:
        - address
        - prefix_len
      properties:
        address:
          $ref: "#/components/schemas/ipv6_address"
        prefix_len:
          type: integer
          minimum: 0
          maximum: 128
    network:
      oneOf:
        - $ref: "#/components/schemas/ipv4_network"
        - $ref: "#/components/schemas/ipv6_network"
    network_type:
      enum: [
        unknown,
        wired,
        wireless,
        local,
        bridge,
        virtual,
      ]
    network_adapter:
      type: object
      required:
        - name
        - net_type
        - is_connected
      properties:
        name:
          type: string
        ipv4_addresses:
          type: array
          items:
            $ref: "#/components/schemas/ipv4_address"
        ipv6_addresses:
          type: array
          items:
            $ref: "#/components/schemas/ipv6_address"
        networks:
          type: array
          items:
            $ref: "#/components/schemas/network"
        gateway:
          $ref: "#/components/schemas/ipv4_gateway"
        mac_address:
          $ref: "#/components/schemas/mac_address"
        net_type:
          $ref: "#/components/schemas/network_type"
        is_connected:
          type: boolean
    instance_config_network:
      required:
        - name
        - ipAddress
      properties:
        name:
          type: string
        ipAddress:
          $ref: "#/components/schemas/ipv4_address"
    instance_environment:
      type: array
      items:
        $ref: "#/components/schemas/instance_environment_variable"
    instance_environment_variable_value:
      type: string
    instance_environment_variable_name:
      type: string
      pattern: "^[a-zA-Z]+(?:[a-zA-Z0-9_\\-\\.])*$"
    instance_environment_variable:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/instance_environment_variable_name"
        value:
          $ref: "#/components/schemas/instance_environment_variable_value"
      required:
        - name
    instance_ports:
      type: object
      properties:
        tcp:
          type: array
          items:
            $ref: "#/components/schemas/instance_port_mapping"
        udp:
          type: array
          items:
            $ref: "#/components/schemas/instance_port_mapping"
        sctp:
          type: array
          items:
            $ref: "#/components/schemas/instance_port_mapping"
      required:
        - tcp
        - udp
        - sctp
    port_range:
      type: object
      properties:
        start:
          $ref: "#/components/schemas/port"
        end:
          $ref: "#/components/schemas/port"
      required:
        - start
        - end
    instance_port_mapping_single:
      type: object
      properties:
        host_port:
          $ref: "#/components/schemas/port"
        container_port:
          $ref: "#/components/schemas/port"
      required:
        - host_port
        - container_port
    instance_port_mapping_range:
      type: object
      properties:
        host_ports:
          $ref: "#/components/schemas/port_range"
        container_ports:
          $ref: "#/components/schemas/port_range"
      required:
        - host_ports
        - container_ports
    instance_port_mapping:
      oneOf:
        - $ref: "#/components/schemas/instance_port_mapping_range"
        - $ref: "#/components/schemas/instance_port_mapping_single"
    instance_label_name:
      type: string
      pattern: "^[a-z](?:(?:[\\-\\.]?[a-zA-Z0-9])*[\\-\\.]?[a-z])?$"
    instance_label_value:
      type: string
    instance_label:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/instance_label_name"
        value:
          $ref: "#/components/schemas/instance_label_value"
      required:
        - name
    # Job related schemas
    job_id:
      type: integer
      format: int32
      minimum: 1
      maximum: 4294967295
    job_status:
      type: string
      enum: [ pending, queued, running, cancelled, successful, failed, unknown ]
    job_step:
      type: object
      required:
        - description
        - num
        - unit
        - unitsTotal
        - unitsDone
        - rate
      properties:
        description:
          type: string
          example: Downloading...
        num:
          type: integer
          example: 3
        unit:
          type: integer
          example: B
        unitsTotal:
          type: integer
          example: 10485761
        unitsDone:
          type: integer
          example: 5120000
        rate:
          type: integer
          example: 2048
    job_result:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          example: -1
        message:
          type: string
          example: Explanation what went wrong
    job:
      type: object
      required:
        - id
        - status
        - description
        - numSteps
        - currentStep
        - result
      properties:
        id:
          $ref: "#/components/schemas/job_id"
        status:
          $ref: "#/components/schemas/job_status"
        description:
          type: string
          example: Installation of FLECS App 1 (1.2.3.4-f1)
        numSteps:
          type: integer
          example: 5
        currentStep:
          $ref: "#/components/schemas/job_step"
        result:
          $ref: "#/components/schemas/job_result"
    job_meta:
      type: object
      required:
        - jobId
      description: Job metadata for accepted requests
      properties:
        jobId:
          type: integer
          example: 17
    # System related schemas
    system_distro:
      type: object
      required:
        - codename
        - id
        - name
        - version
      properties:
        codename:
          type: string
          example: "bookworm"
        id:
          type: string
          example: "debian"
        name:
          type: string
          example: "Debian GNU/Linux 12 (bookworm)"
        version:
          type: string
          example: "12"
    system_kernel:
      type: object
      required:
        - build
        - machine
        - version
      properties:
        build:
          type: string
        machine:
          type: string
          example: "x86_64"
        version:
          type: string
          example: "6.7.6-arch1-1"
    system_info:
      type: object
      required:
        - arch
        - distro
        - kernel
        - platform
      properties:
        arch:
          type: string
          example: "amd64"
        distro:
          $ref: "#/components/schemas/system_distro"
        kernel:
          $ref: "#/components/schemas/system_kernel"
        platform:
          type: string
    # Quest related schemas
    quest:
      type: object
      required:
        - id
        - description
        - state
      properties:
        id:
          type: integer
          minimum: 0
          maximum: 9223372036854775807
        description:
          type: string
        detail:
          type: string
        result:
          type: string
        state:
          $ref: "#/components/schemas/quest_state"
        progress:
          $ref: "#/components/schemas/quest_progress"
        subquests:
          type: array
          items:
            $ref: "#/components/schemas/quest"
    quest_state:
      type: string
      enum: [ failing, ongoing, pending, failed, success, skipped ]
    quest_progress:
      type: object
      required:
        - current
      properties:
        current:
          type: integer
          minimum: 0
          maximum: 9223372036854775807
        total:
          type: integer
          minimum: 0
          maximum: 9223372036854775807
    # Provider schemes
    AdditionalInfo:
      type: object
      required:
        - additional_info
      properties:
        additional_info:
          type: string
    AppKey:
      type: object
      required:
        - name
        - version
      properties:
        name:
          type: string
        version:
          type: string
    AuthProvider:
      type: object
      required:
        - id
        - name
        - issuer_url
        - kind
      properties:
        config: { }
        id:
          $ref: '#/components/schemas/HexString8'
        issuer_url:
          type: string
        kind:
          type: string
        name:
          type: string
    AuthProviders:
      type: object
      required:
        - providers
      properties:
        core:
          oneOf:
            - type: 'null'
            - $ref: '#/components/schemas/HexString8'
        default:
          oneOf:
            - type: 'null'
            - $ref: '#/components/schemas/HexString8'
        providers:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AuthProvider'
          propertyNames:
            type: string
            maxLength: 8
            minLength: 8
            pattern: ^[0-9a-fA-F]{8}$
    Dependency:
      type: object
      required:
        - requirements
      properties:
        provider:
          oneOf:
            - type: 'null'
            - $ref: '#/components/schemas/Provider'
        requirements: { }
    DependencyKey:
      type: string
      minLength: 1
      pattern: ^([\w.-]+)(?:\s*\|\s*([\w.-]+))*$
    FeatureInfo:
      type: object
      required:
        - config
      properties:
        config: { }
    FeatureKey:
      type: string
      minLength: 1
      pattern: ^([\w.-]+)$
    FeatureProvider:
      type: object
      required:
        - app_key
      properties:
        app_key:
          $ref: '#/components/schemas/AppKey'
        config: { }
    FeatureProviders:
      type: object
      required:
        - providers
      properties:
        default:
          oneOf:
            - type: 'null'
            - $ref: '#/components/schemas/HexString8'
        providers:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FeatureProvider'
          propertyNames:
            type: string
            maxLength: 8
            minLength: 8
            pattern: ^[0-9a-fA-F]{8}$
    GenericProvider:
      type: object
      required:
        - app_key
      properties:
        app_key:
          $ref: '#/components/schemas/AppKey'
    GenericProviders:
      type: object
      required:
        - providers
      properties:
        default:
          oneOf:
            - type: 'null'
            - $ref: '#/components/schemas/HexString8'
        providers:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/GenericProvider'
          propertyNames:
            type: string
            maxLength: 8
            minLength: 8
            pattern: ^[0-9a-fA-F]{8}$
    HexString8:
      type: string
      maxLength: 8
      minLength: 8
      pattern: ^[0-9a-fA-F]{8}$
    InstanceNotFoundOrFeatureNotProvided:
      type: string
      enum:
        - InstanceNotFound
        - FeatureNotProvided
    InstanceNotFoundOrNotDependent:
      type: string
      enum:
        - InstanceNotFound
        - NotDependent
    NotFound:
      type: string
      enum:
        - Provider
        - SuperAdmin
    Provider:
      type: object
      required:
        - provider_reference
        - provided_feature
      properties:
        provided_feature:
          type: string
        provider_reference:
          $ref: '#/components/schemas/ProviderReference'
    ProviderReference:
      oneOf:
        - type: string
          enum:
            - Default
        - type: object
          required:
            - Provider
          properties:
            Provider:
              $ref: '#/components/schemas/HexString8'
    Providers:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/GenericProviders'
    PutDefaultProviderRequest:
      type: object
      required:
        - provider_id
      properties:
        provider_id:
          $ref: '#/components/schemas/HexString8'
    SuperAdmin:
      type: object
      required:
        - name
        - password
      properties:
        name:
          type: string
        password:
          type: string
  # Security schemes
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer token authentication
  # Common responses
  responses:
    response_202:
      description: Accepted
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/job_meta"
    response_400:
      description: Malformed request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/additionalInfo"
    response_401:
      description: Unauthorized
    response_403:
      description: Forbidden
    response_404:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/optionalAdditionalInfo"
    response_500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/additionalInfo"

security:
  - bearerAuth: [ ]

tags:
  - name: "Apps"
    x-displayName: "Apps"
    description: Install, manage and uninstall Apps
  - name: "Authentication"
    x-displayName: "Authentication"
  - name: "Deployments"
    x-displayName: "Deployments"
    description: Create, manage and query Deployments
  - name: "Instances"
    x-displayName: "Instances"
    description: Create, manage and delete Instances
  - name: "Jobs"
    x-displayName: "Jobs"
    description: Management of asynchronous jobs
  - name: "Manifests"
    x-displayName: "Manifests"
  - name: "System"
    x-displayName: "System"
  - name: "Device"
    x-displayName: "Device"
  - name: "Console"
    x-displayName: "Console"
  - name: "Flecsport"
    x-displayName: "Flecsport"
  - name: "Experimental"
    x-displayName: "Experimental"
    description: APIs in this category are experimental and may change without a major version change
  - name: "Quests"
    x-displayName: "Quests"

paths:
  # App related paths
  /apps:
    get:
      tags: [ "Apps" ]
      summary: Query installed Apps
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/installed_app"
        "500":
          $ref: "#/components/responses/response_500"
  /apps/{app}:
    get:
      tags: [ "Apps" ]
      summary: Query all versions or specific versions of an App
      parameters:
        - name: app
          in: path
          schema:
            type: string
            description: App to query
          required: true
        - name: version
          in: query
          schema:
            type: string
            description: App version to query
          required: false
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/installed_app"
        "404":
          description: No such app or app/version combination
        "500":
          $ref: "#/components/responses/response_500"
    delete:
      tags: [ "Apps" ]
      summary: Uninstall one or all versions an App
      parameters:
        - name: app
          in: path
          schema:
            type: string
            description: App to uninstall
          required: true
        - name: version
          in: query
          schema:
            type: string
            description: App version to uninstall
          required: false
      responses:
        "202":
          $ref: "#/components/responses/response_202"
        "404":
          description: No such app or app/version combination
        "500":
          $ref: "#/components/responses/response_500"
  /apps/install:
    post:
      tags: [ "Apps" ]
      summary: Install an App from the FLECS marketplace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - appKey
              properties:
                appKey:
                  $ref: "#/components/schemas/app_key"
      responses:
        "202":
          $ref: "#/components/responses/response_202"
        "400":
          $ref: "#/components/responses/response_400"
        "500":
          $ref: "#/components/responses/response_500"
  /apps/sideload:
    post:
      tags: [ "Apps" ]
      summary: Sideload an App from its manifest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - manifest
                - licenseKey
              properties:
                manifest:
                  type: string
      responses:
        "202":
          $ref: "#/components/responses/response_202"
        "400":
          $ref: "#/components/responses/response_400"
  # Authentication related paths
  /auth/providers/default/location:
    get:
      tags: [ "Authentication" ]
      summary: Get the location of the default authentication provider
      security: [ ]
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
                format: uri
                example: "https://123.321.123.321:562/auth"
        "404":
          description: No default auth provider configured
  /auth/providers/default/protocol:
    get:
      tags: [ "Authentication" ]
      summary: Get the protocol of the default authentication provider
      security: [ ]
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/auth_protocol"
        "404":
          description: No default auth provider configured
  # Console related paths
  /console/authentication:
    put:
      tags: [ "Console" ]
      summary: Set the authentication information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/auth_response_data"
      responses:
        "204":
          description: No content
        "400":
          $ref: "#/components/responses/response_400"
    delete:
      tags: [ "Console" ]
      summary: Remove the authentication information
      responses:
        "204":
          description: No content
  # Deployment related paths
  /deployments/{deployment_id}/networks:
    get:
      tags: [ "Deployments" ]
      parameters:
        - name: deployment_id
          in: path
          schema:
            type: string
            description: The id of the deployment or 'default'
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/deployment_network"
        "404":
          description: No deployment with this deployment_id found
        "500":
          $ref: "#/components/responses/response_500"
    post:
      tags: [ "Deployments" ]
      parameters:
        - name: deployment_id
          in: path
          schema:
            type: string
            description: The id of the deployment or 'default'
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/post_deployment_network"
      responses:
        "200":
          description: Already created
        "201":
          description: Created
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          description: Deployment not found
        "500":
          $ref: "#/components/responses/response_500"
  /deployments/{deployment_id}/networks/{network_id}:
    get:
      tags: [ "Deployments" ]
      parameters:
        - name: deployment_id
          in: path
          schema:
            type: string
            description: The id of the deployment or 'default'
          required: true
        - name: network_id
          in: path
          schema:
            type: string
            description: The id of the network
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/deployment_network"
        "404":
          $ref: "#/components/responses/response_404"
        "500":
          $ref: "#/components/responses/response_500"
  /deployments/{deployment_id}/networks/{network_id}/dhcp/ipv4:
    post:
      tags: [ "Deployments" ]
      parameters:
        - name: deployment_id
          in: path
          schema:
            type: string
            description: The id of the deployment or 'default'
          required: true
        - name: network_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  ipv4_address:
                    $ref: "#/components/schemas/ipv4_address"
                required:
                  - ipv4_address
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          $ref: "#/components/responses/response_404"
        "500":
          $ref: "#/components/responses/response_500"
  # Flecsport related paths
  /exports:
    get:
      tags: [ "Flecsport" ]
      summary: Query all existing exports
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/export_id"
        "500":
          $ref: "#/components/responses/response_500"
    post:
      tags: [ "Flecsport" ]
      summary: Create an export
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/export_request"
      responses:
        "202":
          $ref: "#/components/responses/response_202"
        "500":
          $ref: "#/components/responses/response_500"
  /exports/{export_id}:
    get:
      tags: [ "Flecsport" ]
      summary: Download specified export
      parameters:
        - name: export_id
          in: path
          schema:
            $ref: "#/components/schemas/export_id"
          required: true
      responses:
        "200":
          description: Success
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400":
          description: Export id invalid
        "404":
          description: Export not found
        "500":
          $ref: "#/components/responses/response_500"
    delete:
      tags: [ "Flecsport" ]
      summary: Delete specified export
      parameters:
        - name: export_id
          in: path
          schema:
            $ref: "#/components/schemas/export_id"
          required: true
      responses:
        "200":
          description: Success
        "400":
          description: Export id invalid
        "404":
          description: Export not found
        "500":
          $ref: "#/components/responses/response_500"
  /imports:
    post:
      tags: [ "Flecsport" ]
      summary: Upload and import an export file
      parameters:
        - name: Content-Disposition
          description: File name of the export, e.g. my-export.tar
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/export_id'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "202":
          $ref: "#/components/responses/response_202"
        "400":
          $ref: "#/components/responses/response_400"
        "500":
          $ref: "#/components/responses/response_500"
  # Instance related paths
  /instances:
    get:
      tags: [ "Instances" ]
      summary: Query all instances of one or all Apps
      parameters:
        - name: app
          in: query
          schema:
            type: string
            description: App to query instances for
          required: false
        - name: version
          in: query
          schema:
            type: string
            description: App version to query instances for
          required: false
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/app_instance"
  /instances/{instance_id}:
    get:
      tags: [ "Instances" ]
      summary: Obtain details of an App instance
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - instanceId
                  - appKey
                  - status
                  - desired
                  - ipAddress
                  - configFiles
                  - hostname
                  - ports
                  - volumes
                  - instanceName
                properties:
                  instanceId:
                    $ref: "#/components/schemas/instance_id"
                  instanceName:
                    $ref: "#/components/schemas/instance_name"
                  appKey:
                    $ref: "#/components/schemas/app_key"
                  status:
                    $ref: "#/components/schemas/instance_status"
                  desired:
                    $ref: "#/components/schemas/instance_status"
                  configFiles:
                    $ref: "#/components/schemas/instance_detail_config_files"
                  hostname:
                    $ref: "#/components/schemas/instance_detail_hostname"
                  ipAddress:
                    $ref: "#/components/schemas/instance_detail_ip_address"
                  ports:
                    description: Allocated network ports of an instance
                    type: array
                    items:
                      $ref: "#/components/schemas/instance_detail_port"
                  volumes:
                    description: Automatic volumes of an instance
                    type: array
                    items:
                      $ref: "#/components/schemas/instance_detail_volume"
                  editors:
                    $ref: "#/components/schemas/instance_editors"
        "404":
          description: No instance with this instance_id found
        "500":
          $ref: "#/components/responses/response_500"
    patch:
      tags: [ "Instances" ]
      summary: Update or downgrade Instance to another App version
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - to
              properties:
                to:
                  type: string
      responses:
        "202":
          $ref: "#/components/responses/response_202"
        "404":
          description: No instance with this instance_id found
        "500":
          $ref: "#/components/responses/response_500"
    delete:
      tags: [ "Instances" ]
      summary: Delete a single instance
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
      responses:
        "202":
          $ref: "#/components/responses/response_202"
        "404":
          description: No instance with this instance_id found
        "500":
          $ref: "#/components/responses/response_500"
  /instances/create:
    post:
      tags: [ "Instances" ]
      summary: Create new instance of an installed App
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - appKey
              properties:
                appKey:
                  $ref: "#/components/schemas/app_key"
                instanceName:
                  $ref: "#/components/schemas/instance_name"
      responses:
        "202":
          $ref: "#/components/responses/response_202"
        "400":
          $ref: "#/components/responses/response_400"
  /instances/{instance_id}/start:
    post:
      tags: [ "Instances" ]
      summary: Start an App instance
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
      responses:
        "202":
          $ref: "#/components/responses/response_202"
        "404":
          description: No instance with this instance_id found
  /instances/{instance_id}/stop:
    post:
      tags: [ "Instances" ]
      summary: Stop an App instance
      parameters:
        - name: instance_id
          in: path
          schema:
            type: string
            description: Instance id to delete
          required: true
      responses:
        "202":
          $ref: "#/components/responses/response_202"
        "404":
          description: No instance with this instance_id found
  /instances/{instance_id}/logs:
    get:
      tags: [ "Instances" ]
      summary: Retrieve logs of an Instance
      parameters:
        - name: instance_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - stdout
                  - stderr
                properties:
                  stdout:
                    type: string
                  stderr:
                    type: string
        "404":
          description: No instance with this instance_id found
        "500":
          $ref: "#/components/responses/response_500"
  /instances/{instance_id}/config/devices/usb:
    get:
      tags: [ "Instances" ]
      summary: Retrieve passed through usb devices of an instance
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/instance_config_usb_device"
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          description: No instance with this instance_id found
        "500":
          $ref: "#/components/responses/response_500"
    delete:
      tags: [ "Instances" ]
      summary: Remove all passed through usb devices of an instance
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
      responses:
        "200":
          description: Success
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          description: No instance with this instance_id found
  /instances/{instance_id}/config/devices/usb/{port}:
    get:
      tags: [ "Instances" ]
      summary: Retrieve passed through usb device of the instance with the given port
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
        - name: port
          in: path
          schema:
            $ref: "#/components/schemas/usb_port"
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/instance_config_usb_device"
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          $ref: "#/components/responses/response_404"
        "500":
          $ref: "#/components/responses/response_500"
    delete:
      tags: [ "Instances" ]
      summary: Delete passed through usb device of the instance with the given port
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
        - name: port
          in: path
          schema:
            $ref: "#/components/schemas/usb_port"
          required: true
      responses:
        "200":
          description: Success
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          $ref: "#/components/responses/response_404"
    put:
      tags: [ "Instances" ]
      summary: Pass through usb device with the given port to the instance
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
        - name: port
          in: path
          schema:
            $ref: "#/components/schemas/usb_port"
          required: true
      responses:
        "200":
          description: Already passed through
        "201":
          description: Usb device was passed through
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          $ref: "#/components/responses/response_404"
        "500":
          $ref: "#/components/responses/response_500"
  /instances/{instance_id}/config/editors:
    get:
      tags: [ "Instances" ]
      summary: Retrieve editors of an instance
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/instance_editors"
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          description: No instance with this instance_id found
        "500":
          $ref: "#/components/responses/response_500"
  /instances/{instance_id}/config/editors/{port}:
    get:
      tags: [ "Instances" ]
      summary: Retrieve an editor of an instance
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
        - name: port
          in: path
          schema:
            $ref: "#/components/schemas/port"
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/instance_editor"
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          $ref: "#/components/responses/response_404"
        "500":
          $ref: "#/components/responses/response_500"
  /instances/{instance_id}/config/editors/{port}/path_prefix:
    put:
      tags: [ "Instances" ]
      summary: Modify the path prefix used in the editor uri of an instance editor
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
        - name: port
          in: path
          schema:
            $ref: "#/components/schemas/port"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                path_prefix:
                  type: string
              required:
                - path_prefix
      responses:
        "200":
          description: Path prefix of editor was changed
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          $ref: "#/components/responses/response_404"
        "500":
          $ref: "#/components/responses/response_500"
    delete:
      tags: [ "Instances" ]
      summary: Remove the path prefix used in the editor uri of an instance editor, this will revert to the default behaviour (/v2/instances/{instance_id}/editor/{port})
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
        - name: port
          in: path
          schema:
            $ref: "#/components/schemas/port"
          required: true
      responses:
        "200":
          description: Path prefix of editor was removed
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          $ref: "#/components/responses/response_404"
        "500":
          $ref: "#/components/responses/response_500"
  /instances/{instance_id}/config/environment:
    get:
      tags: [ "Instances" ]
      summary: Retrieve environment of an instance
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/instance_environment"
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          description: No instance with this instance_id found
    put:
      tags: [ "Instances" ]
      summary: Modify or create environment of an instance
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/instance_environment"
      responses:
        "200":
          description: Environment for instance with this instance id is set
        "201":
          description: Environment for instance with this instance id was created
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          description: No instance with this instance_id found
    delete:
      tags: [ "Instances" ]
      summary: Delete environment of an instance
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
      responses:
        "200":
          description: Environment of instance with this instance_id was deleted
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          description: No instance with this instance_id found
  /instances/{instance_id}/config/environment/{variable_name}:
    get:
      tags: [ "Instances" ]
      summary: Retrieve the value of an environment variable
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
        - name: variable_name
          in: path
          schema:
            $ref: "#/components/schemas/instance_environment_variable_name"
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                properties:
                  value:
                    $ref: "#/components/schemas/instance_environment_variable_value"
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          $ref: "#/components/responses/response_404"
    put:
      tags: [ "Instances" ]
      summary: Set the value of an environment variable of an instance
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
        - name: variable_name
          in: path
          schema:
            $ref: "#/components/schemas/instance_environment_variable_name"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                value:
                  $ref: "#/components/schemas/instance_environment_variable_value"
      responses:
        "200":
          description: Environment for instance with this instance id is set
        "201":
          description: Environment for instance with this instance id was created
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          description: No instance with this instance_id found
    delete:
      tags: [ "Instances" ]
      summary: Remove an environment variable of an instance
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
        - name: variable_name
          in: path
          schema:
            $ref: "#/components/schemas/instance_environment_variable_name"
          required: true
      responses:
        "200":
          description: Environment variable of instance with this instance_id was deleted
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          $ref: "#/components/responses/response_404"
  /instances/{instance_id}/config/ports/{transport_protocol}:
    get:
      tags: [ "Instances" ]
      summary: Get published ports of an instance for the given transport_protocol
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
        - name: transport_protocol
          in: path
          schema:
            $ref: "#/components/schemas/transport_protocol"
          required: true
      responses:
        "200":
          description: Published ports for instance with this instance_id for the given transport_protocol
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/instance_port_mapping"
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          $ref: "#/components/responses/response_404"
    put:
      tags: [ "Instances" ]
      summary: Update or create published ports of an instance for the given transport protocol
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
        - name: transport_protocol
          in: path
          schema:
            $ref: "#/components/schemas/transport_protocol"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/instance_port_mapping"
      responses:
        "200":
          description: Published ports of instance with this instance_id for the given transport_protocol was set
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          $ref: "#/components/responses/response_404"
    delete:
      tags: [ "Instances" ]
      summary: Remove all published ports of an instance for the given transport_protocol
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
        - name: transport_protocol
          in: path
          schema:
            $ref: "#/components/schemas/transport_protocol"
          required: true
      responses:
        "200":
          description: Removed all published ports of instance with this instance_id for the given transport_protocol
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          $ref: "#/components/responses/response_404"
  /instances/{instance_id}/config/ports/{transport_protocol}/{host_port_range}:
    get:
      tags: [ "Instances" ]
      summary: Retrieve instance port range that is mapped to the given host port range
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
        - name: transport_protocol
          in: path
          schema:
            $ref: "#/components/schemas/transport_protocol"
          required: true
        - name: host_port_range
          in: path
          schema:
            $ref: "#/components/schemas/port_path_parameter"
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/instance_port_mapping"
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          $ref: "#/components/responses/response_404"
    put:
      tags: [ "Instances" ]
      summary: Set instance port range that is mapped to the given host port range
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
        - name: transport_protocol
          in: path
          schema:
            $ref: "#/components/schemas/transport_protocol"
          required: true
        - name: host_port_range
          in: path
          schema:
            $ref: "#/components/schemas/port_path_parameter"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/port_range"
                - $ref: "#/components/schemas/port"
      responses:
        "200":
          description: The specified port mapping was set, the previous mapping of the host port range was overwritten
        "201":
          description: The specified port mapping was created
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          $ref: "#/components/responses/response_404"
    delete:
      tags: [ "Instances" ]
      summary: Remove instance port range that is mapped to the given host port range
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
        - name: transport_protocol
          in: path
          schema:
            $ref: "#/components/schemas/transport_protocol"
          required: true
        - name: host_port_range
          in: path
          schema:
            $ref: "#/components/schemas/port_path_parameter"
          required: true
      responses:
        "200":
          description: Success
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          $ref: "#/components/responses/response_404"
  /instances/{instance_id}/config/ports:
    get:
      tags: [ "Instances" ]
      summary: Retrieve exposed ports of an instance
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/instance_ports"
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          description: No instance with this instance_id found
    delete:
      tags: [ "Instances" ]
      summary: Delete exposed ports of an instance
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
      responses:
        "200":
          description: Exposed ports of instance with this instance_id was deleted
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          description: No instance with this instance_id found
  /instances/{instance_id}/config/labels:
    get:
      tags: [ "Instances" ]
      summary: Retrieve labels of an instance
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/instance_label"
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          description: No instance with this instance_id found
  /instances/{instance_id}/config/networks:
    get:
      tags: [ "Instances" ]
      summary: Retrieve connected networks of instance
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/instance_config_network"
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          description: Instance id not found
    post:
      tags: [ "Instances" ]
      summary: Connect instance to network
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                network_id:
                  type: string
                ipAddress:
                  $ref: "#/components/schemas/ipv4_address"
              required:
                - network_id
      responses:
        "201":
          description: Instance connected
          headers:
            Location:
              schema:
                type: string
              required: true
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          description: Instance id or network not found
        "409":
          description: Instance already connected to Network
        "500":
          $ref: "#/components/responses/response_500"
  /instances/{instance_id}/config/networks/{network_id}:
    get:
      tags: [ "Instances" ]
      summary: Retrieve connected network of instance
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
        - name: network_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/instance_config_network"
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          description: Instance id or network not found
    delete:
      tags: [ "Instances" ]
      summary: Remove connected network of instance
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
        - name: network_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Success
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          description: Instance id or network not found
        "500":
          $ref: "#/components/responses/response_500"
  /instances/{instance_id}/config/labels/{label_name}:
    get:
      tags: [ "Instances" ]
      summary: Retrieve value of a specific label of an instance
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
        - name: label_name
          in: path
          schema:
            $ref: "#/components/schemas/instance_label_name"
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    $ref: "#/components/schemas/instance_label_value"
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          $ref: "#/components/responses/response_404"
  /instances/{instance_id}/config/mounts:
    get:
      tags: [ "Instances" ]
      summary: Retrieve volumes of an instance
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/mounts"
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          description: Instance not found
  /instances/{instance_id}/config/mounts/bind:
    get:
      tags: [ "Instances" ]
      summary: Retrieve bind mounts of an instance
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/bind_mount"
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          description: Instance not found
  /instances/{instance_id}/config/mounts/bind/{container_path}:
    get:
      tags: [ "Instances" ]
      summary: Retrieve bind mount of an instance
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
        - name: container_path
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/bind_mount"
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          $ref: "#/components/responses/response_404"
  /instances/{instance_id}/config/mounts/volumes:
    get:
      tags: [ "Instances" ]
      summary: Retrieve volumes mounts of an instance
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/instance_detail_volume"
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          description: Instance not found
  /instances/{instance_id}/config/mounts/volumes/{volume_name}:
    get:
      tags: [ "Instances" ]
      summary: Retrieve volume mount of an instance
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
        - name: volume_name
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/instance_detail_volume"
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          $ref: "#/components/responses/response_404"
  /instances/{instance_id}/depends:
    get:
      tags:
        - Experimental
      description: Get information on all dependencies of the specified instance
      parameters:
        - name: instance_id
          in: path
          description: Instance to check
          required: true
          schema:
            $ref: '#/components/schemas/HexString8'
      responses:
        '200':
          description: All dependencies of the specified instance and how they are currently solved
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/Dependency'
                propertyNames:
                  type: string
        '404':
          description: Instance not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
  /instances/{instance_id}/depends/{dependency_key}:
    get:
      tags:
        - Experimental
      description: Get information on the dependency for the specified dependency key of the specified instance
      parameters:
        - name: instance_id
          in: path
          description: Instance to check
          required: true
          schema:
            $ref: '#/components/schemas/HexString8'
        - name: dependency_key
          in: path
          description: Feature to check
          required: true
          schema:
            $ref: '#/components/schemas/DependencyKey'
      responses:
        '200':
          description: How the dependency is currently solved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dependency'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
        '404':
          description: Instance not found or instance not dependent on specified dependency
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceNotFoundOrNotDependent'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
    delete:
      tags:
        - Experimental
      description: Remove the provider for the specified dependency of the specified instance
      parameters:
        - name: instance_id
          in: path
          description: Instance to check
          required: true
          schema:
            $ref: '#/components/schemas/HexString8'
        - name: dependency_key
          in: path
          description: Dependency to check
          required: true
          schema:
            $ref: '#/components/schemas/DependencyKey'
      responses:
        '200':
          description: Provider removed
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
        '404':
          description: Instance not found or instance not dependent on specified dependency
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceNotFoundOrNotDependent'
        '409':
          description: State of the instance prevents removal of provider, e.g. instance is running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
    put:
      tags:
        - Experimental
      description: Set a provider for the specified feature of the specified instance
      parameters:
        - name: instance_id
          in: path
          description: Instance to set a provider for
          required: true
          schema:
            $ref: '#/components/schemas/HexString8'
        - name: dependency_key
          in: path
          description: Feature to set a provider for
          required: true
          schema:
            $ref: '#/components/schemas/FeatureKey'
      requestBody:
        description: The provider that should be used
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProviderReference'
        required: true
      responses:
        '200':
          description: Provider was overwritten
        '201':
          description: Provider was set
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
        '404':
          description: Instance not found or instance not dependent on specified feature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceNotFoundOrNotDependent'
        '409':
          description: Provider conflicts with requirements of dependency
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
  /instances/{instance_id}/depends/{dependency_key}/{feature}:
    put:
      tags:
        - Experimental
      description: Set a provider for the specified dependency of the specified instance
      parameters:
        - name: instance_id
          in: path
          description: Instance to set a provider for
          required: true
          schema:
            $ref: '#/components/schemas/HexString8'
        - name: dependency_key
          in: path
          description: Dependency key consisting of multiple features separated by |
          required: true
          schema:
            $ref: '#/components/schemas/DependencyKey'
        - name: feature
          in: path
          description: The specific feature of the dependency key to set a provider for
          required: true
          schema:
            $ref: '#/components/schemas/FeatureKey'
      requestBody:
        description: The provider that should be used
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProviderReference'
        required: true
      responses:
        '200':
          description: Provider was overwritten
        '201':
          description: Provider was set
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
        '404':
          description: Instance not found or instance not dependent on specified feature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceNotFoundOrNotDependent'
        '409':
          description: Provider conflicts with requirements of dependency
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
  /instances/{instance_id}/editor/{port}:
    get:
      tags: [ "Instances" ]
      summary: Access an editor of an app
      parameters:
        - name: instance_id
          in: path
          schema:
            $ref: "#/components/schemas/instance_id"
          required: true
        - name: port
          in: path
          schema:
            $ref: "#/components/schemas/port"
          required: true
      responses:
        "302":
          description: Found
          headers:
            Location:
              schema:
                type: string
              required: true
        "400":
          $ref: "#/components/responses/response_400"
        "404":
          description: Instance id or port not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/additionalInfo"
        "500":
          $ref: "#/components/responses/response_500"
  /instances/{instance_id}/provides:
    get:
      tags:
        - Experimental
      description: Get all provided feature of the specified instance
      parameters:
        - name: instance_id
          in: path
          description: Instance to check
          required: true
          schema:
            $ref: '#/components/schemas/HexString8'
      responses:
        '200':
          description: Information for all features and their config provided by this instance
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/FeatureInfo'
                propertyNames:
                  type: string
        '404':
          description: Instance id not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
  /instances/{instance_id}/provides/{feature}:
    get:
      tags:
        - Experimental
      description: Check if the specified instance provides the specified feature
      parameters:
        - name: instance_id
          in: path
          description: Instance to check
          required: true
          schema:
            $ref: '#/components/schemas/HexString8'
        - name: feature
          in: path
          description: Feature to check
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Information of the specified feature provided by the specified instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureInfo'
        '404':
          description: Instance not found or feature not provided by instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceNotFoundOrFeatureNotProvided'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
  # Job related paths
  /jobs:
    get:
      tags: [ "Jobs" ]
      summary: Retrieve a list of all pending/queued/running/failed/cancelled jobs
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/job"
  /jobs/{job_id}:
    get:
      tags: [ "Jobs" ]
      summary: Retrieve information for specific job_id
      parameters:
        - name: job_id
          in: path
          schema:
            type: integer
            description: job_id to query
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/job"
        "404":
          description: Not found
    delete:
      tags: [ "Jobs" ]
      summary: Cancel job or remove failed/successful/cancelled job from journal
      parameters:
        - name: job_id
          in: path
          schema:
            type: integer
            description: job_id to query
          required: true
      responses:
        "200":
          description: Success
        "404":
          description: Not found
        "400":
          description: Job not finished
          content:
            text/plain:
              schema:
                type: string
  # Manifest related paths
  /manifests:
    get:
      tags: [ "Manifests" ]
      summary: Get a list of all manifests
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/app_manifest"
  /manifests/{app_name}/{version}:
    get:
      tags: [ "Manifests" ]
      summary: Get a specific manifest
      parameters:
        - name: app_name
          in: path
          schema:
            type: string
          required: true
        - name: version
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/app_manifest"
        "404":
          description: Manifest not found
        "500":
          $ref: "#/components/responses/response_500"
  # Provider related paths
  /providers:
    get:
      tags:
        - Experimental
      description: Get information for all providers
      responses:
        '200':
          description: Information for all providers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Providers'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
  /providers/auth:
    get:
      tags:
        - Experimental
      description: Get information for all auth providers
      responses:
        '200':
          description: Information for all auth providers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthProviders'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
  /providers/auth/core:
    get:
      tags:
        - Experimental
      description: Get information on the core auth provider
      responses:
        '200':
          description: How the core auth provider is currently set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderReference'
        '404':
          description: No core auth provider set
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
    put:
      tags:
        - Experimental
      description: Set a core auth provider
      requestBody:
        description: The provider that should be used
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProviderReference'
        required: true
      responses:
        '200':
          description: Provider was overwritten
        '201':
          description: Provider was set
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
  /providers/auth/core/first-time-setup/super-admin:
    get:
      tags:
        - Experimental
      description: Check if the super admin of the core auth provider is set
      responses:
        '204':
          description: Super admin of core auth provider set
        '404':
          description: Super admin of core auth provider not set or no core provider set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    post:
      tags:
        - Experimental
      description: Set the super admin of the core auth provider
      requestBody:
        description: Super admin that should be set to the default auth provider
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuperAdmin'
            example: '{"name": "admin", "password": "8i2jh%3/K9h1qwf"}'
        required: true
      responses:
        '200':
          description: Super admin of core auth provider set
        '400':
          description: Invalid super admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
        '403':
          description: Forbidden
        '404':
          description: No core auth provider present
        '500':
          description: Failed to set super admin of core auth provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
  /providers/auth/default:
    get:
      tags:
        - Experimental
      responses:
        '200':
          description: Default auth provider was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthProvider'
        '404':
          description: No default auth provider was found
    put:
      tags:
        - Experimental
      requestBody:
        description: Id of the provider that should be used as the default auth provider
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutDefaultProviderRequest'
            example: '{"provider_id": "3f6bfe21"}'
        required: true
      responses:
        '200':
          description: Default auth provider was replaced
        '201':
          description: Default auth provider was set
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
    delete:
      tags:
        - Experimental
      responses:
        '200':
          description: Remove the default auth provider
        '404':
          description: No default auth provider was found
        '409':
          description: The current state does not allow the removal of the default auth provider, e.g. a running instance is using it
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
  /providers/auth/default/first-time-setup/super-admin:
    get:
      tags:
        - Experimental
      description: Check if the super admin of the default auth provider is set
      responses:
        '204':
          description: Super admin of default auth provider set
        '404':
          description: Super admin of default auth provider not set or no default provider set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    post:
      tags:
        - Experimental
      description: Set the super admin of the default auth provider
      requestBody:
        description: Super admin that should be set to the default auth provider
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuperAdmin'
            example: '{"name": "admin", "password": "8i2jh%3/K9h1qwf"}'
        required: true
      responses:
        '200':
          description: Super admin of default auth provider set
        '400':
          description: Invalid super admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
        '403':
          description: Forbidden
        '404':
          description: No default auth provider present
        '500':
          description: Failed to set super admin of default auth provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
  /providers/auth/first-time-setup/flecsport:
    post:
      tags:
        - Experimental
      description: Trigger the first time setup of auth providers via flecsport
      responses:
        '202':
          description: First time setup of auth providers via flecsport triggered
  /providers/auth/{id}:
    get:
      tags:
        - Experimental
      parameters:
        - name: id
          in: path
          description: Id of the auth provider to get
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Auth provider was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthProvider'
        '404':
          description: Auth provider was not found
  /providers/auth/{id}/first-time-setup/super-admin:
    get:
      tags:
        - Experimental
      description: Check if the super admin of the specified auth provider is set
      parameters:
        - name: id
          in: path
          description: Id of the auth provider to check
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Super admin of specified auth provider set
        '404':
          description: Super admin of specified auth provider not set or specified provider not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    post:
      tags:
        - Experimental
      description: Set the super admin of the specified auth provider
      parameters:
        - name: id
          in: path
          description: Id of the auth provider to configure
          required: true
          schema:
            type: string
      requestBody:
        description: Super admin that should be set to the specified auth provider
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuperAdmin'
            example: '{"name": "admin", "password": "8i2jh%3/K9h1qwf"}'
        required: true
      responses:
        '200':
          description: Super admin of specified auth provider set
        '400':
          description: Invalid super admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
        '403':
          description: Forbidden
        '404':
          description: Specified auth provider not found
        '500':
          description: Failed to set super admin of specified auth provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
  /providers/{feature}:
    get:
      tags:
        - Experimental
      description: Get information for all providers of the specified feature
      parameters:
        - name: feature
          in: path
          description: Feature for which to get the providers
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Information for all providers of the specified feature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureProviders'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
  /providers/{feature}/default:
    get:
      tags:
        - Experimental
      parameters:
        - name: feature
          in: path
          description: Feature for which to get the default provider
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Default provider for specified feature was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureProvider'
        '404':
          description: Default provider for specified feature was not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
    put:
      tags:
        - Experimental
      parameters:
        - name: feature
          in: path
          description: Feature for which to set the default provider
          required: true
          schema:
            type: string
      requestBody:
        description: Id of the provider that should be used as the default provider of the specified feature
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutDefaultProviderRequest'
            example: '{"provider_id": "3f6bfe21"}'
        required: true
      responses:
        '200':
          description: Default provider for specified feature was replaced
        '201':
          description: Default provider for specified feature was set
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
        '404':
          description: Provider not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
    delete:
      tags:
        - Experimental
      parameters:
        - name: feature
          in: path
          description: Feature for which to unset the default provider
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Default provider for specified feature unset
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
        '404':
          description: Default provider for specified feature was not found
        '409':
          description: The current state does not allow the removal of the default provider, e.g. a running instance is using it
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
  /providers/{feature}/{id}:
    get:
      tags:
        - Experimental
      parameters:
        - name: id
          in: path
          description: Id of the provider to get
          required: true
          schema:
            type: string
        - name: feature
          in: path
          description: Feature if the provider to get
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Provider was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureProvider'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInfo'
        '404':
          description: Provider was not found
  # System related paths
  /system/ping:
    get:
      tags: [ "System" ]
      summary: Check daemon availability and connectivity
      security: [ ]
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/additionalInfo"
  /system/version:
    get:
      tags: [ "System" ]
      summary: Get FLECS core and API version
      security: [ ]
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - api
                  - core
                properties:
                  api:
                    type: string
                    example: "2.0.0"
                  core:
                    type: string
                    example: "v2.0.0-???"
  /system/info:
    get:
      tags: [ "System" ]
      summary: Get architecture and operating system information
      responses:
        "200":
          description: Sucess
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/system_info"
  /system/network_adapters:
    get:
      tags: [ "System" ]
      summary: Get network adapters of system
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/network_adapter"
        "500":
          $ref: "#/components/responses/response_500"
  /system/network_adapters/{network_adapter_id}:
    get:
      tags: [ "System" ]
      summary: Get network adapter of system
      parameters:
        - name: network_adapter_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/network_adapter"
        "404":
          description: Network adapter not found
        "500":
          $ref: "#/components/responses/response_500"
  /system/devices:
    get:
      tags: [ "System" ]
      summary: Get devices of system
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/devices"
        "500":
          $ref: "#/components/responses/response_500"
  /system/devices/usb:
    get:
      tags: [ "System" ]
      summary: Get usb devices of system
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/usb_device"
        "500":
          $ref: "#/components/responses/response_500"
  /system/devices/usb/{port}:
    get:
      tags: [ "System" ]
      summary: Get usb device of system
      parameters:
        - name: port
          in: path
          schema:
            $ref: "#/components/schemas/usb_port"
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/usb_device"
        "404":
          description: Device not found
        "500":
          $ref: "#/components/responses/response_500"
  # Device related paths
  /device/license/activation:
    post:
      tags: [ "Device" ]
      summary: Execute device activation
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/additionalInfo"
        "500":
          $ref: "#/components/responses/response_500"
  /device/license/activation/status:
    get:
      tags: [ "Device" ]
      summary: Check if device is activated
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - isValid
                properties:
                  isValid:
                    type: boolean
                    example: true
        "500":
          $ref: "#/components/responses/response_500"
  /device/license/info:
    get:
      tags: [ "Device" ]
      summary: Get information about license
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - type
                properties:
                  type:
                    type: string
                    example: Serialnumber
                  license:
                    type: string
                  sessionId:
                    $ref: "#/components/schemas/sessionId"
  /device/onboarding:
    post:
      tags: [ "Device" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "https://raw.githubusercontent.com/FLECS-Technologies/flecs-public/main/schema/dos.schema.json"
      responses:
        "202":
          $ref: "#/components/responses/response_202"
        "400":
          $ref: "#/components/responses/response_400"
        "500":
          $ref: "#/components/responses/response_500"
  /quests:
    get:
      tags: [ "Quests" ]
      summary: Get a list of all quests
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/quest"
  /quests/{id}:
    get:
      tags: [ "Quests" ]
      summary: Get a specific quest by its id
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            format: int64
            minimum: 0
            maximum: 9223372036854775807
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/quest"
        "404":
          description: Quest not found
    delete:
      tags: [ "Quests" ]
      summary: Delete a specific quest by its id
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            format: int64
            minimum: 0
            maximum: 9223372036854775807
          required: true
      responses:
        "200":
          description: Success
        "400":
          description: Unfinished quests can not be deleted
        "404":
          description: Quest not found
