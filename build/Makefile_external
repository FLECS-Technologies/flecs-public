# Copyright 2021 FLECS Technologies GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

ROOT_DIR=$(shell git rev-parse --show-toplevel)

define find_external
$(eval DIR := $(abspath $(wildcard $(ROOT_DIR)/external/$(1)*/)))
@if [ -z "$(DIR)" ]; then echo "Could not find external '$(1)'. Stop."; exit 1; fi
endef

define find_openssl
$(eval OPENSSL_DIR := $(abspath $(wildcard $(ROOT_DIR)/external/openssl*/)))
@if [ -z "$(OPENSSL_DIR)" ]; then echo "Could not find external 'openssl'. Stop."; exit 1; fi
endef

define make
$(MAKE) -C $(DIR) -j $(shell nproc) $(1) $(2)
endef

define cmake
cmake -B $(DIR)/out/$(MACHINE) -S $(DIR) -DCMAKE_TOOLCHAIN_FILE=$(ROOT_DIR)/build/utils/cmake/toolchains/$(MACHINE).cmake $(1)
cmake --build $(DIR)/out/$(MACHINE)
endef

ifndef DOCKERLESS
external/%:
	$(DOCKER_PREFIX) $(MAKE) DOCKERLESS=1 $@
else
.PHONY: external/curl
external/curl: external/openssl
	$(call find_external,curl)
	$(call find_openssl)
	$(call cmake,-DBUILD_SHARED_LIBS=NO -DOPENSSL_ROOT_DIR=$(OPENSSL_DIR)/out/$(MACHINE) -DOPENSSL_INCLUDE_DIR=$(OPENSSL_DIR)/out/$(MACHINE)/include)

.PHONY: external/jsoncpp
external/jsoncpp:
	$(call find_external,jsoncpp)
	$(call cmake,-DJSONCPP_WITH_TESTS=OFF)

.PHONY: external/llhttp
external/llhttp:
	$(call find_external,llhttp)
	HOME=$$(pwd) npm --prefix $(DIR) install
	$(call make,PREFIX=$(DIR)/out/$(MACHINE),install)

.PHONY: external/mosquitto
external/mosquitto:
	$(call find_external,mosquitto)
	$(call cmake,-DDOCUMENTATION=NO)

.PHONY: external/openssl
external/openssl:
	$(call find_external,openssl)
	cd $(DIR)/flecs-configure; ./Configure.$(MACHINE).sh --cross-compile-prefix= --prefix=$(DIR)/out/$(MACHINE) no-shared
	$(call make,all)
	$(call make,install_sw)

.PHONY: external/sqlite
external/sqlite:
	$(call find_external,sqlite)
	cd $(DIR); autoreconf; ./configure --prefix=$(DIR)/out/$(MACHINE) --host=$(CROSS_COMPILE)
	$(call make,install)

.PHONY: external/yaml-cpp
external/yaml-cpp:
	$(call find_external,yaml-cpp)
	$(call cmake,-DYAML_CPP_BUILD_TESTS=NO)

.PHONY: external/zlib
external/zlib:
	$(call find_external,zlib)
	$(call cmake,-DBUILD_SHARED_LIBS=NO)
endif
