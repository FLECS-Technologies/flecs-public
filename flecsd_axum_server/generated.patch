diff --git a/flecsd_axum_server/src/models.rs b/flecsd_axum_server/src/models.rs
index bf6f96c0..2766dd34 100644
--- a/flecsd_axum_server/src/models.rs
+++ b/flecsd_axum_server/src/models.rs
@@ -6129,7 +6129,7 @@ impl std::convert::TryFrom<HeaderValue>
 #[cfg_attr(feature = "conversion", derive(frunk::LabelledGeneric))]
 pub struct Job {
     #[serde(rename = "id")]
-    #[validate(range(min = 1, max = 4294967295))]
+    #[validate(range(min = 1, max = 4294967295u32))]
     pub id: u32,
 
     #[serde(rename = "status")]
@@ -7199,7 +7199,7 @@ pub struct SessionId {
     pub id: Option<String>,
 
     #[serde(rename = "timestamp")]
-    #[validate(range(min = 0, max = 9223372036854775807))]
+    #[validate(range(min = 0, max = 9223372036854775807u64))]
     #[serde(skip_serializing_if = "Option::is_none")]
     pub timestamp: Option<u64>,
 }
diff --git a/flecsd_axum_server/Cargo.toml b/flecsd_axum_server/Cargo.toml
index 3386fdb0..220beeb4 100644
--- a/flecsd_axum_server/Cargo.toml
+++ b/flecsd_axum_server/Cargo.toml
@@ -41,7 +41,7 @@ tokio = { version = "1", default-features = false, features = [
 ] }
 tracing = { version = "0.1", features = ["attributes"] }
 uuid = { version = "1", features = ["serde"] }
-validator = { version = "0.18", features = ["derive"] }
+validator = { version = "0.19", features = ["derive"] }
 
 [dev-dependencies]
 tracing-subscriber = "0.3"
diff --git a/flecsd_axum_server/src/server/mod.rs b/flecsd_axum_server/src/server/mod.rs
index 72cc4208..6662cbe0 100644
--- a/flecsd_axum_server/src/server/mod.rs
+++ b/flecsd_axum_server/src/server/mod.rs
@@ -1,9 +1,13 @@
-use std::collections::HashMap;
-
-use axum::{body::Body, extract::*, response::Response, routing::*};
+use async_trait::async_trait;
+use axum::extract::rejection::{JsonRejection, MissingJsonContentType};
+use axum::extract::{FromRequest, Host, Path, Query, State};
+use axum::extract::{Json as AxumJson, Request};
+use axum::{body::Body, response::Response, routing::*};
 use axum_extra::extract::{CookieJar, Multipart};
 use bytes::Bytes;
 use http::{header::CONTENT_TYPE, HeaderMap, HeaderName, HeaderValue, Method, StatusCode};
+use serde::de::DeserializeOwned;
+use std::collections::HashMap;
 use tracing::error;
 use validator::{Validate, ValidationErrors};
 
@@ -12,6 +16,28 @@ use crate::{header, types::*};
 #[allow(unused_imports)]
 use crate::{apis, models};
 
+#[derive(Debug, Clone, Copy, Default)]
+#[must_use]
+pub struct Json<T>(pub T);
+
+#[async_trait]
+impl<T, S> FromRequest<S> for Json<T>
+where
+    T: DeserializeOwned,
+    S: Send + Sync,
+{
+    type Rejection = JsonRejection;
+
+    async fn from_request(mut req: Request, state: &S) -> Result<Self, Self::Rejection> {
+        req.headers_mut().insert(
+            "Content-Type",
+            HeaderValue::from_str("application/json").unwrap(),
+        );
+        let json = AxumJson::<T>::from_request(req, state).await?;
+        Ok(Self(json.0))
+    }
+}
+
 /// Setup API Server.
 pub fn new<I, A>(api_impl: I) -> Router
 where
