use async_trait::async_trait;
use axum::extract::rejection::{JsonRejection, MissingJsonContentType};
use axum::extract::{FromRequest, Host, Path, Query, State};
use axum::extract::{Json as AxumJson, Request};
use axum::{body::Body, response::Response, routing::*};
use axum_extra::extract::{CookieJar, Multipart};
use bytes::Bytes;
use http::{header::CONTENT_TYPE, HeaderMap, HeaderName, HeaderValue, Method, StatusCode};
use serde::de::DeserializeOwned;
use std::collections::HashMap;
use tracing::error;
use validator::{Validate, ValidationErrors};

use crate::{header, types::*};

#[allow(unused_imports)]
use crate::{apis, models};

#[derive(Debug, Clone, Copy, Default)]
#[must_use]
pub struct Json<T>(pub T);

#[async_trait]
impl<T, S> FromRequest<S> for Json<T>
where
    T: DeserializeOwned,
    S: Send + Sync,
{
    type Rejection = JsonRejection;

    async fn from_request(mut req: Request, state: &S) -> Result<Self, Self::Rejection> {
        req.headers_mut().insert(
            "Content-Type",
            HeaderValue::from_str("application/json").unwrap(),
        );
        let json = AxumJson::<T>::from_request(req, state).await?;
        Ok(Self(json.0))
    }
}